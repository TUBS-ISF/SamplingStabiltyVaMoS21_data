2010-01-25 13:24:06 +0100
diff --git a/libbb/unicode_wcwidth.c b/libbb/unicode_wcwidth.c
index 515c084..8d301f7 100644
--- a/libbb/unicode_wcwidth.c
+++ b/libbb/unicode_wcwidth.c
@@ -65,22 +65,49 @@ struct interval {
 };
 
 /* auxiliary function for binary search in interval table */
-static int in_table(unsigned ucs, const struct interval *table, unsigned max)
+static int in_interval_table(unsigned ucs, const struct interval *table, unsigned max)
 {
-	unsigned min = 0;
+	unsigned min;
 	unsigned mid;
 
 	if (ucs < table[0].first || ucs > table[max].last)
 		return 0;
 
+	min = 0;
 	while (max >= min) {
 		mid = (min + max) / 2;
 		if (ucs > table[mid].last)
-    			min = mid + 1;
+			min = mid + 1;
 		else if (ucs < table[mid].first)
-    			max = mid - 1;
+			max = mid - 1;
 		else
-    			return 1;
+			return 1;
+	}
+	return 0;
+}
+
+static int in_uint16_table(unsigned ucs, const uint16_t *table, unsigned max)
+{
+	unsigned min;
+	unsigned mid;
+	unsigned first, last;
+
+	first = table[0] >> 2;
+	last = first + (table[0] & 3);
+	if (ucs < first || ucs > last)
+		return 0;
+
+	min = 0;
+	while (max >= min) {
+		mid = (min + max) / 2;
+		first = table[mid] >> 2;
+		last = first + (table[mid] & 3);
+		if (ucs > last)
+			min = mid + 1;
+		else if (ucs < first)
+			max = mid - 1;
+		else
+			return 1;
 	}
 	return 0;
 }
@@ -122,49 +149,276 @@ static int wcwidth(unsigned ucs)
 	/* sorted list of non-overlapping intervals of non-spacing characters */
 	/* generated by "uniset +cat=Me +cat=Mn +cat=Cf -00AD +1160-11FF +200B c" */
 	static const struct interval combining[] = {
-		{ 0x0300, 0x036F }, { 0x0483, 0x0486 }, { 0x0488, 0x0489 },
-		{ 0x0591, 0x05BD }, { 0x05BF, 0x05BF }, { 0x05C1, 0x05C2 },
-		{ 0x05C4, 0x05C5 }, { 0x05C7, 0x05C7 }, { 0x0600, 0x0603 },
-		{ 0x0610, 0x0615 }, { 0x064B, 0x065E }, { 0x0670, 0x0670 },
-		{ 0x06D6, 0x06E4 }, { 0x06E7, 0x06E8 }, { 0x06EA, 0x06ED },
-		{ 0x070F, 0x070F }, { 0x0711, 0x0711 }, { 0x0730, 0x074A },
-		{ 0x07A6, 0x07B0 }, { 0x07EB, 0x07F3 }, { 0x0901, 0x0902 },
-		{ 0x093C, 0x093C }, { 0x0941, 0x0948 }, { 0x094D, 0x094D },
-		{ 0x0951, 0x0954 }, { 0x0962, 0x0963 }, { 0x0981, 0x0981 },
-		{ 0x09BC, 0x09BC }, { 0x09C1, 0x09C4 }, { 0x09CD, 0x09CD },
-		{ 0x09E2, 0x09E3 }, { 0x0A01, 0x0A02 }, { 0x0A3C, 0x0A3C },
-		{ 0x0A41, 0x0A42 }, { 0x0A47, 0x0A48 }, { 0x0A4B, 0x0A4D },
-		{ 0x0A70, 0x0A71 }, { 0x0A81, 0x0A82 }, { 0x0ABC, 0x0ABC },
-		{ 0x0AC1, 0x0AC5 }, { 0x0AC7, 0x0AC8 }, { 0x0ACD, 0x0ACD },
-		{ 0x0AE2, 0x0AE3 }, { 0x0B01, 0x0B01 }, { 0x0B3C, 0x0B3C },
-		{ 0x0B3F, 0x0B3F }, { 0x0B41, 0x0B43 }, { 0x0B4D, 0x0B4D },
-		{ 0x0B56, 0x0B56 }, { 0x0B82, 0x0B82 }, { 0x0BC0, 0x0BC0 },
-		{ 0x0BCD, 0x0BCD }, { 0x0C3E, 0x0C40 }, { 0x0C46, 0x0C48 },
-		{ 0x0C4A, 0x0C4D }, { 0x0C55, 0x0C56 }, { 0x0CBC, 0x0CBC },
-		{ 0x0CBF, 0x0CBF }, { 0x0CC6, 0x0CC6 }, { 0x0CCC, 0x0CCD },
-		{ 0x0CE2, 0x0CE3 }, { 0x0D41, 0x0D43 }, { 0x0D4D, 0x0D4D },
-		{ 0x0DCA, 0x0DCA }, { 0x0DD2, 0x0DD4 }, { 0x0DD6, 0x0DD6 },
-		{ 0x0E31, 0x0E31 }, { 0x0E34, 0x0E3A }, { 0x0E47, 0x0E4E },
-		{ 0x0EB1, 0x0EB1 }, { 0x0EB4, 0x0EB9 }, { 0x0EBB, 0x0EBC },
-		{ 0x0EC8, 0x0ECD }, { 0x0F18, 0x0F19 }, { 0x0F35, 0x0F35 },
-		{ 0x0F37, 0x0F37 }, { 0x0F39, 0x0F39 }, { 0x0F71, 0x0F7E },
-		{ 0x0F80, 0x0F84 }, { 0x0F86, 0x0F87 }, { 0x0F90, 0x0F97 },
-		{ 0x0F99, 0x0FBC }, { 0x0FC6, 0x0FC6 }, { 0x102D, 0x1030 },
-		{ 0x1032, 0x1032 }, { 0x1036, 0x1037 }, { 0x1039, 0x1039 },
-		{ 0x1058, 0x1059 }, { 0x1160, 0x11FF }, { 0x135F, 0x135F },
-		{ 0x1712, 0x1714 }, { 0x1732, 0x1734 }, { 0x1752, 0x1753 },
-		{ 0x1772, 0x1773 }, { 0x17B4, 0x17B5 }, { 0x17B7, 0x17BD },
-		{ 0x17C6, 0x17C6 }, { 0x17C9, 0x17D3 }, { 0x17DD, 0x17DD },
-		{ 0x180B, 0x180D }, { 0x18A9, 0x18A9 }, { 0x1920, 0x1922 },
-		{ 0x1927, 0x1928 }, { 0x1932, 0x1932 }, { 0x1939, 0x193B },
-		{ 0x1A17, 0x1A18 }, { 0x1B00, 0x1B03 }, { 0x1B34, 0x1B34 },
-		{ 0x1B36, 0x1B3A }, { 0x1B3C, 0x1B3C }, { 0x1B42, 0x1B42 },
-		{ 0x1B6B, 0x1B73 }, { 0x1DC0, 0x1DCA }, { 0x1DFE, 0x1DFF },
-		{ 0x200B, 0x200F }, { 0x202A, 0x202E }, { 0x2060, 0x2063 },
-		{ 0x206A, 0x206F }, { 0x20D0, 0x20EF }, { 0x302A, 0x302F },
-		{ 0x3099, 0x309A }, { 0xA806, 0xA806 }, { 0xA80B, 0xA80B },
-		{ 0xA825, 0xA826 }, { 0xFB1E, 0xFB1E }, { 0xFE00, 0xFE0F },
-		{ 0xFE20, 0xFE23 }, { 0xFEFF, 0xFEFF }, { 0xFFF9, 0xFFFB }
+#define BIG_(a,b) { a, b },
+#define PAIR(a,b)
+		/* PAIR if < 0x4000 and no more than 4 chars big */
+		BIG_(0x0300, 0x036F)
+		PAIR(0x0483, 0x0486)
+		PAIR(0x0488, 0x0489)
+		BIG_(0x0591, 0x05BD)
+		PAIR(0x05BF, 0x05BF)
+		PAIR(0x05C1, 0x05C2)
+		PAIR(0x05C4, 0x05C5)
+		PAIR(0x05C7, 0x05C7)
+		PAIR(0x0600, 0x0603)
+		BIG_(0x0610, 0x0615)
+		BIG_(0x064B, 0x065E)
+		PAIR(0x0670, 0x0670)
+		BIG_(0x06D6, 0x06E4)
+		PAIR(0x06E7, 0x06E8)
+		PAIR(0x06EA, 0x06ED)
+		PAIR(0x070F, 0x070F)
+		PAIR(0x0711, 0x0711)
+		BIG_(0x0730, 0x074A)
+		BIG_(0x07A6, 0x07B0)
+		BIG_(0x07EB, 0x07F3)
+		PAIR(0x0901, 0x0902)
+		PAIR(0x093C, 0x093C)
+		BIG_(0x0941, 0x0948)
+		PAIR(0x094D, 0x094D)
+		PAIR(0x0951, 0x0954)
+		PAIR(0x0962, 0x0963)
+		PAIR(0x0981, 0x0981)
+		PAIR(0x09BC, 0x09BC)
+		PAIR(0x09C1, 0x09C4)
+		PAIR(0x09CD, 0x09CD)
+		PAIR(0x09E2, 0x09E3)
+		PAIR(0x0A01, 0x0A02)
+		PAIR(0x0A3C, 0x0A3C)
+		PAIR(0x0A41, 0x0A42)
+		PAIR(0x0A47, 0x0A48)
+		PAIR(0x0A4B, 0x0A4D)
+		PAIR(0x0A70, 0x0A71)
+		PAIR(0x0A81, 0x0A82)
+		PAIR(0x0ABC, 0x0ABC)
+		BIG_(0x0AC1, 0x0AC5)
+		PAIR(0x0AC7, 0x0AC8)
+		PAIR(0x0ACD, 0x0ACD)
+		PAIR(0x0AE2, 0x0AE3)
+		PAIR(0x0B01, 0x0B01)
+		PAIR(0x0B3C, 0x0B3C)
+		PAIR(0x0B3F, 0x0B3F)
+		PAIR(0x0B41, 0x0B43)
+		PAIR(0x0B4D, 0x0B4D)
+		PAIR(0x0B56, 0x0B56)
+		PAIR(0x0B82, 0x0B82)
+		PAIR(0x0BC0, 0x0BC0)
+		PAIR(0x0BCD, 0x0BCD)
+		PAIR(0x0C3E, 0x0C40)
+		PAIR(0x0C46, 0x0C48)
+		PAIR(0x0C4A, 0x0C4D)
+		PAIR(0x0C55, 0x0C56)
+		PAIR(0x0CBC, 0x0CBC)
+		PAIR(0x0CBF, 0x0CBF)
+		PAIR(0x0CC6, 0x0CC6)
+		PAIR(0x0CCC, 0x0CCD)
+		PAIR(0x0CE2, 0x0CE3)
+		PAIR(0x0D41, 0x0D43)
+		PAIR(0x0D4D, 0x0D4D)
+		PAIR(0x0DCA, 0x0DCA)
+		PAIR(0x0DD2, 0x0DD4)
+		PAIR(0x0DD6, 0x0DD6)
+		PAIR(0x0E31, 0x0E31)
+		BIG_(0x0E34, 0x0E3A)
+		BIG_(0x0E47, 0x0E4E)
+		PAIR(0x0EB1, 0x0EB1)
+		BIG_(0x0EB4, 0x0EB9)
+		PAIR(0x0EBB, 0x0EBC)
+		BIG_(0x0EC8, 0x0ECD)
+		PAIR(0x0F18, 0x0F19)
+		PAIR(0x0F35, 0x0F35)
+		PAIR(0x0F37, 0x0F37)
+		PAIR(0x0F39, 0x0F39)
+		BIG_(0x0F71, 0x0F7E)
+		BIG_(0x0F80, 0x0F84)
+		PAIR(0x0F86, 0x0F87)
+		PAIR(0x0FC6, 0x0FC6)
+		BIG_(0x0F90, 0x0F97)
+		BIG_(0x0F99, 0x0FBC)
+		PAIR(0x102D, 0x1030)
+		PAIR(0x1032, 0x1032)
+		PAIR(0x1036, 0x1037)
+		PAIR(0x1039, 0x1039)
+		PAIR(0x1058, 0x1059)
+		BIG_(0x1160, 0x11FF)
+		PAIR(0x135F, 0x135F)
+		PAIR(0x1712, 0x1714)
+		PAIR(0x1732, 0x1734)
+		PAIR(0x1752, 0x1753)
+		PAIR(0x1772, 0x1773)
+		PAIR(0x17B4, 0x17B5)
+		BIG_(0x17B7, 0x17BD)
+		PAIR(0x17C6, 0x17C6)
+		BIG_(0x17C9, 0x17D3)
+		PAIR(0x17DD, 0x17DD)
+		PAIR(0x180B, 0x180D)
+		PAIR(0x18A9, 0x18A9)
+		PAIR(0x1920, 0x1922)
+		PAIR(0x1927, 0x1928)
+		PAIR(0x1932, 0x1932)
+		PAIR(0x1939, 0x193B)
+		PAIR(0x1A17, 0x1A18)
+		PAIR(0x1B00, 0x1B03)
+		PAIR(0x1B34, 0x1B34)
+		BIG_(0x1B36, 0x1B3A)
+		PAIR(0x1B3C, 0x1B3C)
+		PAIR(0x1B42, 0x1B42)
+		BIG_(0x1B6B, 0x1B73)
+		BIG_(0x1DC0, 0x1DCA)
+		PAIR(0x1DFE, 0x1DFF)
+		BIG_(0x200B, 0x200F)
+		BIG_(0x202A, 0x202E)
+		PAIR(0x2060, 0x2063)
+		BIG_(0x206A, 0x206F)
+		BIG_(0x20D0, 0x20EF)
+		BIG_(0x302A, 0x302F)
+		PAIR(0x3099, 0x309A)
+		/* Too big to be packed in PAIRs: */
+		{ 0xA806, 0xA806 },
+		{ 0xA80B, 0xA80B },
+		{ 0xA825, 0xA826 },
+		{ 0xFB1E, 0xFB1E },
+		{ 0xFE00, 0xFE0F },
+		{ 0xFE20, 0xFE23 },
+		{ 0xFEFF, 0xFEFF },
+		{ 0xFFF9, 0xFFFB }
+#undef BIG_
+#undef PAIR
+	};
+	static const uint16_t combining1[] = {
+#define BIG_(a,b)
+#define PAIR(a,b) (a << 2) | (b-a),
+		/* Exact copy-n-paste of the above: */
+		BIG_(0x0300, 0x036F)
+		PAIR(0x0483, 0x0486)
+		PAIR(0x0488, 0x0489)
+		BIG_(0x0591, 0x05BD)
+		PAIR(0x05BF, 0x05BF)
+		PAIR(0x05C1, 0x05C2)
+		PAIR(0x05C4, 0x05C5)
+		PAIR(0x05C7, 0x05C7)
+		PAIR(0x0600, 0x0603)
+		BIG_(0x0610, 0x0615)
+		BIG_(0x064B, 0x065E)
+		PAIR(0x0670, 0x0670)
+		BIG_(0x06D6, 0x06E4)
+		PAIR(0x06E7, 0x06E8)
+		PAIR(0x06EA, 0x06ED)
+		PAIR(0x070F, 0x070F)
+		PAIR(0x0711, 0x0711)
+		BIG_(0x0730, 0x074A)
+		BIG_(0x07A6, 0x07B0)
+		BIG_(0x07EB, 0x07F3)
+		PAIR(0x0901, 0x0902)
+		PAIR(0x093C, 0x093C)
+		BIG_(0x0941, 0x0948)
+		PAIR(0x094D, 0x094D)
+		PAIR(0x0951, 0x0954)
+		PAIR(0x0962, 0x0963)
+		PAIR(0x0981, 0x0981)
+		PAIR(0x09BC, 0x09BC)
+		PAIR(0x09C1, 0x09C4)
+		PAIR(0x09CD, 0x09CD)
+		PAIR(0x09E2, 0x09E3)
+		PAIR(0x0A01, 0x0A02)
+		PAIR(0x0A3C, 0x0A3C)
+		PAIR(0x0A41, 0x0A42)
+		PAIR(0x0A47, 0x0A48)
+		PAIR(0x0A4B, 0x0A4D)
+		PAIR(0x0A70, 0x0A71)
+		PAIR(0x0A81, 0x0A82)
+		PAIR(0x0ABC, 0x0ABC)
+		BIG_(0x0AC1, 0x0AC5)
+		PAIR(0x0AC7, 0x0AC8)
+		PAIR(0x0ACD, 0x0ACD)
+		PAIR(0x0AE2, 0x0AE3)
+		PAIR(0x0B01, 0x0B01)
+		PAIR(0x0B3C, 0x0B3C)
+		PAIR(0x0B3F, 0x0B3F)
+		PAIR(0x0B41, 0x0B43)
+		PAIR(0x0B4D, 0x0B4D)
+		PAIR(0x0B56, 0x0B56)
+		PAIR(0x0B82, 0x0B82)
+		PAIR(0x0BC0, 0x0BC0)
+		PAIR(0x0BCD, 0x0BCD)
+		PAIR(0x0C3E, 0x0C40)
+		PAIR(0x0C46, 0x0C48)
+		PAIR(0x0C4A, 0x0C4D)
+		PAIR(0x0C55, 0x0C56)
+		PAIR(0x0CBC, 0x0CBC)
+		PAIR(0x0CBF, 0x0CBF)
+		PAIR(0x0CC6, 0x0CC6)
+		PAIR(0x0CCC, 0x0CCD)
+		PAIR(0x0CE2, 0x0CE3)
+		PAIR(0x0D41, 0x0D43)
+		PAIR(0x0D4D, 0x0D4D)
+		PAIR(0x0DCA, 0x0DCA)
+		PAIR(0x0DD2, 0x0DD4)
+		PAIR(0x0DD6, 0x0DD6)
+		PAIR(0x0E31, 0x0E31)
+		BIG_(0x0E34, 0x0E3A)
+		BIG_(0x0E47, 0x0E4E)
+		PAIR(0x0EB1, 0x0EB1)
+		BIG_(0x0EB4, 0x0EB9)
+		PAIR(0x0EBB, 0x0EBC)
+		BIG_(0x0EC8, 0x0ECD)
+		PAIR(0x0F18, 0x0F19)
+		PAIR(0x0F35, 0x0F35)
+		PAIR(0x0F37, 0x0F37)
+		PAIR(0x0F39, 0x0F39)
+		BIG_(0x0F71, 0x0F7E)
+		BIG_(0x0F80, 0x0F84)
+		PAIR(0x0F86, 0x0F87)
+		PAIR(0x0FC6, 0x0FC6)
+		BIG_(0x0F90, 0x0F97)
+		BIG_(0x0F99, 0x0FBC)
+		PAIR(0x102D, 0x1030)
+		PAIR(0x1032, 0x1032)
+		PAIR(0x1036, 0x1037)
+		PAIR(0x1039, 0x1039)
+		PAIR(0x1058, 0x1059)
+		BIG_(0x1160, 0x11FF)
+		PAIR(0x135F, 0x135F)
+		PAIR(0x1712, 0x1714)
+		PAIR(0x1732, 0x1734)
+		PAIR(0x1752, 0x1753)
+		PAIR(0x1772, 0x1773)
+		PAIR(0x17B4, 0x17B5)
+		BIG_(0x17B7, 0x17BD)
+		PAIR(0x17C6, 0x17C6)
+		BIG_(0x17C9, 0x17D3)
+		PAIR(0x17DD, 0x17DD)
+		PAIR(0x180B, 0x180D)
+		PAIR(0x18A9, 0x18A9)
+		PAIR(0x1920, 0x1922)
+		PAIR(0x1927, 0x1928)
+		PAIR(0x1932, 0x1932)
+		PAIR(0x1939, 0x193B)
+		PAIR(0x1A17, 0x1A18)
+		PAIR(0x1B00, 0x1B03)
+		PAIR(0x1B34, 0x1B34)
+		BIG_(0x1B36, 0x1B3A)
+		PAIR(0x1B3C, 0x1B3C)
+		PAIR(0x1B42, 0x1B42)
+		BIG_(0x1B6B, 0x1B73)
+		BIG_(0x1DC0, 0x1DCA)
+		PAIR(0x1DFE, 0x1DFF)
+		BIG_(0x200B, 0x200F)
+		BIG_(0x202A, 0x202E)
+		PAIR(0x2060, 0x2063)
+		BIG_(0x206A, 0x206F)
+		BIG_(0x20D0, 0x20EF)
+		BIG_(0x302A, 0x302F)
+		PAIR(0x3099, 0x309A)
+#undef BIG_
+#undef PAIR
+	};
+	struct CHECK {
+#define BIG_(a,b) char big##a[b-a <= 3 ? -1 : 1];
+#define PAIR(a,b) char pair##a[b-a > 3 ? -1 : 1];
+		/* Copy-n-paste it here again to verify correctness */
+#undef BIG_
+#undef PAIR
 	};
 	static const struct interval combining0x10000[] = {
 		{ 0x0A01, 0x0A03 }, { 0x0A05, 0x0A06 }, { 0x0A0C, 0x0A0F },
@@ -182,14 +436,16 @@ static int wcwidth(unsigned ucs)
 		return 1;
 
 	/* binary search in table of non-spacing characters */
-	if (in_table(ucs, combining, ARRAY_SIZE(combining) - 1))
+	if (in_interval_table(ucs, combining, ARRAY_SIZE(combining) - 1))
+		return 0;
+	if (in_uint16_table(ucs, combining1, ARRAY_SIZE(combining1) - 1))
 		return 0;
 
 	if (ucs < 0x1100) /* optimization */
 		return 1;
 
 	/* binary search in table of non-spacing characters, cont. */
-	if (in_table(ucs ^ 0x10000, combining0x10000, ARRAY_SIZE(combining0x10000) - 1))
+	if (in_interval_table(ucs ^ 0x10000, combining0x10000, ARRAY_SIZE(combining0x10000) - 1))
 		return 0;
 	if (ucs == 0xE0001
 	 || (ucs >= 0xE0020 && ucs <= 0xE007F)
