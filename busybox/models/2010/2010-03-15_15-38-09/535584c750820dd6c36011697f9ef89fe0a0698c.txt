2010-03-15 15:38:09 +0100
diff --git a/archival/Config.in b/archival/Config.in
index fb79c7b..9e2e88c 100644
--- a/archival/Config.in
+++ b/archival/Config.in
@@ -62,6 +62,13 @@ config FEATURE_AR_LONG_FILENAMES
 	  It supports the GNU ar long filename method which moves multiple long
 	  filenames into a the data section of a new ar entry.
 
+config FEATURE_AR_CREATE
+	bool "Support archive creation"
+	default n
+	depends on AR
+	help
+	  This enables archive creation (-c and -r) with busybox ar.
+
 config BUNZIP2
 	bool "bunzip2"
 	default n
diff --git a/archival/ar.c b/archival/ar.c
index fd7f8e4..9039747 100644
--- a/archival/ar.c
+++ b/archival/ar.c
@@ -8,6 +8,10 @@
  *
  * Licensed under GPLv2 or later, see file LICENSE in this tarball for details.
  *
+ * Archive creation support:
+ * Copyright (C) 2010 Nokia Corporation. All rights reserved.
+ * Written by Alexander Shishkin.
+ *
  * There is no single standard to adhere to so ar may not portable
  * between different systems
  * http://www.unix-systems.org/single_unix_specification_v2/xcu/ar.html
@@ -15,6 +19,150 @@
 
 #include "libbb.h"
 #include "unarchive.h"
+#include "ar.h"
+
+#if ENABLE_FEATURE_AR_CREATE
+/* filter out entries with same names as specified on the command line */
+static char FAST_FUNC filter_replaceable(archive_handle_t *handle)
+{
+	if (find_list_entry(handle->accept, handle->file_header->name))
+		return EXIT_FAILURE;
+
+	return EXIT_SUCCESS;
+}
+
+static void output_ar_header(archive_handle_t *handle)
+{
+	/* GNU ar 2.19.51.0.14 creates malformed archives
+	 * if input files are >10G. It also truncates files >4GB
+	 * (uses "size mod 4G"). We abort in this case:
+	 * We could add support for up to 10G files, but this is unlikely to be useful.
+	 * Note that unpacking side limits all fields to "unsigned int" data type,
+	 * and treats "all ones" as an error indicator. Thus max we allow here is UINT_MAX-1.
+	 */
+	enum {
+		/* for 2nd field: mtime */
+		MAX11CHARS = UINT_MAX > 0xffffffff ? (unsigned)99999999999 : UINT_MAX-1,
+		/* for last field: filesize */
+		MAX10CHARS = UINT_MAX > 0xffffffff ? (unsigned)9999999999 : UINT_MAX-1,
+	};
+
+	struct file_header_t *fh = handle->file_header;
+
+	if (handle->offset & 1) {
+		xwrite(handle->src_fd, "\n", 1);
+		handle->offset++;
+	}
+
+	/* Careful! The widths should be exact. Fields must be separated */
+	if (sizeof(off_t) > 4 && fh->size > (off_t)MAX10CHARS) {
+		bb_error_msg_and_die("'%s' is bigger than ar can handle", fh->name);
+	}
+	fdprintf(handle->src_fd, "%-16.16s%-12lu%-6u%-6u%-8o%-10"OFF_FMT"u`\n",
+			fh->name,
+			(sizeof(time_t) > 4 && fh->mtime > MAX11CHARS) ? (long)0 : (long)fh->mtime,
+			fh->uid > 99999 ? 0 : (int)fh->uid,
+			fh->gid > 99999 ? 0 : (int)fh->gid,
+			(int)fh->mode & 07777777,
+			fh->size
+	);
+
+	handle->offset += AR_HEADER_LEN;
+}
+
+/*
+ * when replacing files in an existing archive, copy from the the
+ * original archive those files that are to be left intact
+ */
+static void FAST_FUNC copy_data(archive_handle_t *handle)
+{
+	archive_handle_t *out_handle = handle->ar__out;
+	struct file_header_t *fh = handle->file_header;
+
+	out_handle->file_header = fh;
+	output_ar_header(out_handle);
+
+	bb_copyfd_exact_size(handle->src_fd, out_handle->src_fd, fh->size);
+	out_handle->offset += fh->size;
+}
+
+static int write_ar_header(archive_handle_t *handle)
+{
+	char *fn;
+	char fn_h[17]; /* 15 + "/" + NUL */
+	struct stat st;
+	int fd;
+
+	fn = llist_pop(&handle->accept);
+	if (!fn)
+		return -1;
+
+	xstat(fn, &st);
+
+	handle->file_header->mtime = st.st_mtime;
+	handle->file_header->uid = st.st_uid;
+	handle->file_header->gid = st.st_gid;
+	handle->file_header->mode = st.st_mode;
+	handle->file_header->size = st.st_size;
+	handle->file_header->name = fn_h;
+//TODO: if ENABLE_FEATURE_AR_LONG_FILENAMES...
+	sprintf(fn_h, "%.15s/", bb_basename(fn));
+
+	output_ar_header(handle);
+
+	fd = xopen(fn, O_RDONLY);
+	bb_copyfd_exact_size(fd, handle->src_fd, st.st_size);
+	close(fd);
+	handle->offset += st.st_size;
+
+	return 0;
+}
+
+static int write_ar_archive(archive_handle_t *handle)
+{
+	struct stat st;
+	archive_handle_t *out_handle;
+
+	if (fstat(handle->src_fd, &st) == -1)
+		bb_simple_perror_msg_and_die(handle->ar__name);
+
+	/* if archive exists, create a new handle for output.
+	 * we create it in place of the old one.
+	 */
+	if (st.st_size != 0) {
+		out_handle = init_handle();
+		xunlink(handle->ar__name);
+		out_handle->src_fd = xopen(handle->ar__name, O_WRONLY | O_CREAT | O_TRUNC);
+		out_handle->accept = handle->accept;
+	} else {
+		out_handle = handle;
+	}
+
+	handle->ar__out = out_handle;
+
+	xwrite(out_handle->src_fd, AR_MAGIC "\n", AR_MAGIC_LEN + 1);
+	out_handle->offset += AR_MAGIC_LEN + 1;
+
+	/* skip to the end of the archive if we have to append stuff */
+	if (st.st_size != 0) {
+		handle->filter = filter_replaceable;
+		handle->action_data = copy_data;
+		unpack_ar_archive(handle);
+	}
+
+	while (write_ar_header(out_handle) == 0)
+		continue;
+
+	/* optional, since we exit right after we return */
+	if (ENABLE_FEATURE_CLEAN_UP) {
+		close(handle->src_fd);
+		if (out_handle->src_fd != handle->src_fd)
+			close(out_handle->src_fd);
+	}
+
+	return EXIT_SUCCESS;
+}
+#endif /* FEATURE_AR_CREATE */
 
 static void FAST_FUNC header_verbose_list_ar(const file_header_t *file_header)
 {
@@ -25,41 +173,51 @@ static void FAST_FUNC header_verbose_list_ar(const file_header_t *file_header)
 	mtime[16] = ' ';
 	memmove(&mtime[17], &mtime[20], 4);
 	mtime[21] = '\0';
-	printf("%s %d/%d%7d %s %s\n", &mode[1], file_header->uid, file_header->gid,
-			(int) file_header->size, &mtime[4], file_header->name);
+	printf("%s %u/%u%7"OFF_FMT"u %s %s\n", &mode[1],
+			(int)file_header->uid, (int)file_header->gid,
+			file_header->size,
+			&mtime[4], file_header->name
+	);
 }
 
-#define AR_CTX_PRINT		0x01
-#define AR_CTX_LIST		0x02
-#define AR_CTX_EXTRACT		0x04
-#define AR_OPT_PRESERVE_DATE	0x08
-#define AR_OPT_VERBOSE		0x10
-#define AR_OPT_CREATE		0x20
-#define AR_OPT_INSERT		0x40
+#define AR_OPT_VERBOSE		(1 << 0)
+#define AR_OPT_PRESERVE_DATE	(1 << 1)
+/* "ar r" implies create, but warns about it. c suppresses warning.
+ * bbox accepts but ignores it: */
+#define AR_OPT_CREATE		(1 << 2)
+
+#define AR_CMD_PRINT		(1 << 3)
+#define FIRST_CMD AR_CMD_PRINT
+#define AR_CMD_LIST		(1 << 4)
+#define AR_CMD_EXTRACT		(1 << 5)
+#define AR_CMD_INSERT		(1 << 6)
 
 int ar_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int ar_main(int argc UNUSED_PARAM, char **argv)
 {
-	static const char msg_unsupported_err[] ALIGN1 =
-		"archive %s is not supported";
-
 	archive_handle_t *archive_handle;
-	unsigned opt;
+	unsigned opt, t;
 
 	archive_handle = init_handle();
 
-	/* Prepend '-' to the first argument if required */
-	opt_complementary = "--:p:t:x:-1:p--tx:t--px:x--pt";
-	opt = getopt32(argv, "ptxovcr");
+	/* --: prepend '-' to the first argument if required */
+	/* -1: at least one param is reqd */
+	/* one of p,t,x[,r] is required */
+	opt_complementary = "--:-1:p:t:x"IF_FEATURE_AR_CREATE(":r");
+	opt = getopt32(argv, "voc""ptx"IF_FEATURE_AR_CREATE("r"));
 	argv += optind;
 
-	if (opt & AR_CTX_PRINT) {
+	t = opt / FIRST_CMD;
+	if (t & (t-1)) /* more than one of p,t,x[,r] are specified */
+		bb_show_usage();
+
+	if (opt & AR_CMD_PRINT) {
 		archive_handle->action_data = data_extract_to_stdout;
 	}
-	if (opt & AR_CTX_LIST) {
+	if (opt & AR_CMD_LIST) {
 		archive_handle->action_header = header_list;
 	}
-	if (opt & AR_CTX_EXTRACT) {
+	if (opt & AR_CMD_EXTRACT) {
 		archive_handle->action_data = data_extract_all;
 	}
 	if (opt & AR_OPT_PRESERVE_DATE) {
@@ -68,20 +226,25 @@ int ar_main(int argc UNUSED_PARAM, char **argv)
 	if (opt & AR_OPT_VERBOSE) {
 		archive_handle->action_header = header_verbose_list_ar;
 	}
-	if (opt & AR_OPT_CREATE) {
-		bb_error_msg_and_die(msg_unsupported_err, "creation");
-	}
-	if (opt & AR_OPT_INSERT) {
-		bb_error_msg_and_die(msg_unsupported_err, "insertion");
-	}
-
-	archive_handle->src_fd = xopen(*argv++, O_RDONLY);
+#if ENABLE_FEATURE_AR_CREATE
+	archive_handle->ar__name = *argv;
+#endif
+	archive_handle->src_fd = xopen(*argv++,
+			(opt & AR_CMD_INSERT)
+				? O_RDWR | O_CREAT
+				: O_RDONLY
+	);
 
+	archive_handle->filter = filter_accept_list;
 	while (*argv) {
-		archive_handle->filter = filter_accept_list;
-		llist_add_to(&archive_handle->accept, *argv++);
+		llist_add_to_end(&archive_handle->accept, *argv++);
 	}
 
+#if ENABLE_FEATURE_AR_CREATE
+	if (opt & AR_CMD_INSERT)
+		return write_ar_archive(archive_handle);
+#endif
+
 	unpack_ar_archive(archive_handle);
 
 	return EXIT_SUCCESS;
diff --git a/archival/libunarchive/get_header_ar.c b/archival/libunarchive/get_header_ar.c
index 2f38279..dbc5ec0 100644
--- a/archival/libunarchive/get_header_ar.c
+++ b/archival/libunarchive/get_header_ar.c
@@ -6,6 +6,7 @@
 
 #include "libbb.h"
 #include "unarchive.h"
+#include "ar.h"
 
 static unsigned read_num(const char *str, int base)
 {
@@ -23,15 +24,7 @@ char FAST_FUNC get_header_ar(archive_handle_t *archive_handle)
 	unsigned size;
 	union {
 		char raw[60];
-		struct {
-			char name[16];
-			char date[12];
-			char uid[6];
-			char gid[6];
-			char mode[8];
-			char size[10];
-			char magic[2];
-		} formatted;
+		struct ar_header formatted;
 	} ar;
 #if ENABLE_FEATURE_AR_LONG_FILENAMES
 	static char *ar_long_names;
@@ -55,13 +48,13 @@ char FAST_FUNC get_header_ar(archive_handle_t *archive_handle)
 	}
 	archive_handle->offset += 60;
 
-	/* align the headers based on the header magic */
 	if (ar.formatted.magic[0] != '`' || ar.formatted.magic[1] != '\n')
 		bb_error_msg_and_die("invalid ar header");
 
 	/* FIXME: more thorough routine would be in order here
 	 * (we have something like that in tar)
 	 * but for now we are lax. */
+	ar.formatted.magic[0] = '\0'; /* else 4G-2 file will have size="4294967294`\n..." */
 	typed->size = size = read_num(ar.formatted.size, 10);
 
 	/* special filenames have '/' as the first character */
diff --git a/archival/libunarchive/unpack_ar_archive.c b/archival/libunarchive/unpack_ar_archive.c
index dc2eec2..300d10e 100644
--- a/archival/libunarchive/unpack_ar_archive.c
+++ b/archival/libunarchive/unpack_ar_archive.c
@@ -5,16 +5,17 @@
 
 #include "libbb.h"
 #include "unarchive.h"
+#include "ar.h"
 
 void FAST_FUNC unpack_ar_archive(archive_handle_t *ar_archive)
 {
 	char magic[7];
 
-	xread(ar_archive->src_fd, magic, 7);
-	if (strncmp(magic, "!<arch>", 7) != 0) {
+	xread(ar_archive->src_fd, magic, AR_MAGIC_LEN);
+	if (strncmp(magic, AR_MAGIC, AR_MAGIC_LEN) != 0) {
 		bb_error_msg_and_die("invalid ar magic");
 	}
-	ar_archive->offset += 7;
+	ar_archive->offset += AR_MAGIC_LEN;
 
 	while (get_header_ar(ar_archive) == EXIT_SUCCESS)
 		continue;
diff --git a/include/ar.h b/include/ar.h
new file mode 100644
index 0000000..2667889
--- /dev/null
+++ b/include/ar.h
@@ -0,0 +1,26 @@
+/*
+ * busybox ar archive data structures
+ * Licensed under the GPL v2 or later, see the file LICENSE in this source tree.
+ */
+#ifndef AR_H
+#define AR_H
+
+PUSH_AND_SET_FUNCTION_VISIBILITY_TO_HIDDEN
+
+struct ar_header {
+	char name[16];
+	char date[12];
+	char uid[6];
+	char gid[6];
+	char mode[8];
+	char size[10];
+	char magic[2];
+};
+
+#define AR_HEADER_LEN sizeof(struct ar_header)
+#define AR_MAGIC      "!<arch>"
+#define AR_MAGIC_LEN  7
+
+POP_SAVED_FUNCTION_VISIBILITY
+
+#endif
diff --git a/include/unarchive.h b/include/unarchive.h
index 8bfc92c..92ebd65 100644
--- a/include/unarchive.h
+++ b/include/unarchive.h
@@ -73,6 +73,10 @@ typedef struct archive_handle_t {
 	/* Contains the handle to a sub archive */
 	struct archive_handle_t *dpkg__sub_archive;
 #endif
+#if ENABLE_FEATURE_AR_CREATE
+	const char *ar__name;
+	struct archive_handle_t *ar__out;
+#endif
 } archive_handle_t;
 /* bits in ah_flags */
 #define ARCHIVE_RESTORE_DATE        (1 << 0)
diff --git a/testsuite/ar.tests b/testsuite/ar.tests
new file mode 100755
index 0000000..f112eb6
--- /dev/null
+++ b/testsuite/ar.tests
@@ -0,0 +1,27 @@
+#!/bin/sh
+# Copyright 2010 Nokia Corporation
+# Written by Alexander Shishkin
+# Licensed under GPL v2 or later, see file LICENSE for details
+
+. ./testing.sh
+
+# testing "test name" "command(s)" "expected result" "file input" "stdin"
+
+optional FEATURE_AR_CREATE
+
+rm test.a 2>/dev/null
+testing "ar creates archives" \
+       "ar rc test.a README && ar p test.a README | md5sum" \
+       "$(md5sum <README)\n" \
+       "" \
+       ""
+rm test.a
+
+testing "ar replaces things in archives" \
+       "echo 'blah!' >file1 && echo 'blast!'> file2 && ar cr test.a README file1 file2 && mv file2 file1 && ar cr test.a file1 && ar p test.a file1" \
+       "blast!\n" \
+       "" \
+       ""
+rm test.a
+
+exit $FAILCOUNT
