2008-02-08 15:04:00 +0000
diff --git a/include/usage.h b/include/usage.h
index fb88e9b..9ae7d98 100644
--- a/include/usage.h
+++ b/include/usage.h
@@ -881,6 +881,9 @@ USE_FEATURE_BRCTL_FANCY("\n" \
 #define eject_full_usage \
        "Eject specified DEVICE (or default /dev/cdrom)" \
        "\n\nOptions:\n" \
+       USE_FEATURE_EJECT_SCSI( \
+       "	-s	scsi device\n" \
+       ) \
        "	-t	Close tray\n" \
        "	-T	Open/close tray (toggle)"
 
diff --git a/miscutils/Config.in b/miscutils/Config.in
index e6c6504..d64d053 100644
--- a/miscutils/Config.in
+++ b/miscutils/Config.in
@@ -126,6 +126,14 @@ config EJECT
 	help
 	  Used to eject cdroms.  (defaults to /dev/cdrom)
 
+config FEATURE_EJECT_SCSI
+  bool "eject scsi support"
+  default n
+  depends on EJECT
+  help
+    Add the -s option to eject, this allows to eject SCSI-Devices and
+    usb-storage devices.
+
 config LAST
 	bool "last"
 	default n
diff --git a/miscutils/eject.c b/miscutils/eject.c
index 99f01ab..746a018 100644
--- a/miscutils/eject.c
+++ b/miscutils/eject.c
@@ -25,33 +25,86 @@
 #define FLAG_CLOSE  1
 #define FLAG_SMART  2
 
+
+/* Code taken from the original eject (http://eject.sourceforge.net/),
+ * refactored it a bit for busybox (ne-bb@nicoerfurth.de) */
+#define FLAG_SCSI   4
+
+#include <scsi/sg.h>
+#include <scsi/scsi.h>
+static void eject_scsi(const int fd, const char * const dev)
+{
+  int i;
+  unsigned char sense_buffer[32];
+  unsigned char inqBuff[2];
+  sg_io_hdr_t io_hdr;
+  char sg_commands[3][6] = {
+    {ALLOW_MEDIUM_REMOVAL, 0, 0, 0, 0, 0},
+    {START_STOP, 0, 0, 0, 1, 0},
+    {START_STOP, 0, 0, 0, 2, 0}
+  };
+
+  if ((ioctl(fd, SG_GET_VERSION_NUM, &i) < 0) || (i < 30000))
+    bb_error_msg_and_die("not an sg device or old sg driver");
+
+  memset(&io_hdr, 0, sizeof(sg_io_hdr_t));
+  io_hdr.interface_id = 'S';
+  io_hdr.cmd_len = 6;
+  io_hdr.mx_sb_len = sizeof(sense_buffer);
+  io_hdr.dxfer_direction = SG_DXFER_NONE;
+  /* io_hdr.dxfer_len = 0; */
+  io_hdr.dxferp = inqBuff;
+  io_hdr.sbp = sense_buffer;
+  io_hdr.timeout = 2000;
+
+  for (i=0; i < 3; i++) {
+    io_hdr.cmdp = sg_commands[i];
+    ioctl_or_perror_and_die(fd, SG_IO, (void *)&io_hdr, "%s", dev);
+  }
+
+  /* force kernel to reread partition table when new disc inserted */
+  ioctl(fd, BLKRRPART);
+}
+
+static void eject_cdrom(const int fd, const unsigned long flags,
+						const char * const dev)
+{
+	int cmd = CDROMEJECT;
+
+	if (flags & FLAG_CLOSE
+	 || (flags & FLAG_SMART && ioctl(fd, CDROM_DRIVE_STATUS) == CDS_TRAY_OPEN))
+		cmd = CDROMCLOSETRAY;
+
+	return ioctl_or_perror_and_die(fd, cmd, NULL, "%s", dev);
+}
+
 int eject_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int eject_main(int argc, char **argv)
 {
 	unsigned long flags;
 	const char *device;
-	int dev, cmd;
+	int dev;
 
 	opt_complementary = "?1:t--T:T--t";
-	flags = getopt32(argv, "tT");
-	device = argv[optind] ? : "/dev/cdrom";
-
-	// We used to do "umount <device>" here, but it was buggy
-	// if something was mounted OVER cdrom and
-	// if cdrom is mounted many times.
-	//
-	// This works equally well (or better):
-	// #!/bin/sh
-	// umount /dev/cdrom
-	// eject
+	flags = getopt32(argv, "tT" USE_FEATURE_EJECT_SCSI("s"));
+	device = argv[optind] ? argv[optind] : "/dev/cdrom";
+
+	/* We used to do "umount <device>" here, but it was buggy
+	   if something was mounted OVER cdrom and
+	   if cdrom is mounted many times.
+
+	   This works equally well (or better):
+	   #!/bin/sh
+	   umount /dev/cdrom
+	   eject
+	*/
 
 	dev = xopen(device, O_RDONLY|O_NONBLOCK);
-	cmd = CDROMEJECT;
-	if (flags & FLAG_CLOSE
-	 || (flags & FLAG_SMART && ioctl(dev, CDROM_DRIVE_STATUS) == CDS_TRAY_OPEN))
-		cmd = CDROMCLOSETRAY;
 
-	ioctl_or_perror_and_die(dev, cmd, NULL, "%s", device);
+	if (ENABLE_FEATURE_EJECT_SCSI && (flags & FLAG_SCSI))
+		eject_scsi(dev, device);
+	else
+		eject_cdrom(dev, flags, device);
 
 	if (ENABLE_FEATURE_CLEAN_UP)
 		close(dev);
diff --git a/scripts/defconfig b/scripts/defconfig
index 35cec96..31a172c 100644
--- a/scripts/defconfig
+++ b/scripts/defconfig
@@ -512,6 +512,7 @@ CONFIG_DC=y
 # CONFIG_DEVFSD_VERBOSE is not set
 # CONFIG_FEATURE_DEVFS is not set
 CONFIG_EJECT=y
+CONFIG_FEATURE_EJECT_SCSI=y
 CONFIG_LAST=y
 CONFIG_LESS=y
 CONFIG_FEATURE_LESS_MAXLINES=9999999
