2008-11-29 12:54:16 +0000
diff --git a/include/usage.h b/include/usage.h
index 502fea7..000b864 100644
--- a/include/usage.h
+++ b/include/usage.h
@@ -2788,12 +2788,13 @@
        "Returns 0 for success, number of failed mounts for -a, or errno for one mount."
 
 #define mountpoint_trivial_usage \
-       "[-q] <[-d] DIR | -x DEVICE>"
+       "[-q] <[-dn] DIR | -x DEVICE>"
 #define mountpoint_full_usage "\n\n" \
-       "mountpoint checks if the directory is a mountpoint\n" \
+       "Check if the directory is a mountpoint\n" \
      "\nOptions:" \
      "\n	-q	Quiet" \
      "\n	-d	Print major/minor device number of the filesystem" \
+     "\n	-n	Print device name of the filesystem" \
      "\n	-x	Print major/minor device number of the blockdevice" \
 
 #define mountpoint_example_usage \
diff --git a/miscutils/mountpoint.c b/miscutils/mountpoint.c
index 81ce429..b541ce2 100644
--- a/miscutils/mountpoint.c
+++ b/miscutils/mountpoint.c
@@ -12,55 +12,61 @@
 #include "libbb.h"
 
 int mountpoint_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
-int mountpoint_main(int argc, char **argv)
+int mountpoint_main(int argc UNUSED_PARAM, char **argv)
 {
 	struct stat st;
+	const char *msg;
 	char *arg;
-	int opt = getopt32(argv, "qdx");
+	int rc, opt;
+
+	opt_complementary = "=1"; /* must have one argument */
+	opt = getopt32(argv, "qdxn");
 #define OPT_q (1)
 #define OPT_d (2)
 #define OPT_x (4)
+#define OPT_n (8)
+	arg = argv[optind];
+	msg = "%s";
 
-	if (optind != argc - 1)
-		bb_show_usage();
+	rc = (opt & OPT_x) ? stat(arg, &st) : lstat(arg, &st);
+	if (rc != 0)
+		goto err;
 
-	arg = argv[optind];
+	if (opt & OPT_x) {
+		if (S_ISBLK(st.st_mode)) {
+			printf("%u:%u\n", major(st.st_rdev),
+						minor(st.st_rdev));
+			return EXIT_SUCCESS;
+		}
+		errno = 0; /* make perror_msg work as error_msg */
+		msg = "%s: not a block device";
+		goto err;
+	}
+
+	errno = ENOTDIR;
+	if (S_ISDIR(st.st_mode)) {
+		dev_t st_dev = st.st_dev;
+		ino_t st_ino = st.st_ino;
+		char *p = xasprintf("%s/..", arg);
 
-	if ( (opt & OPT_x && stat(arg, &st) == 0) || (lstat(arg, &st) == 0) ) {
-		if (opt & OPT_x) {
-			if (S_ISBLK(st.st_mode)) {
-				printf("%u:%u\n", major(st.st_rdev),
-							minor(st.st_rdev));
-				return EXIT_SUCCESS;
-			} else {
-				if (opt & OPT_q)
-					bb_putchar('\n');
-				else
-					bb_error_msg("%s: not a block device", arg);
-			}
-			return EXIT_FAILURE;
-		} else
-		if (S_ISDIR(st.st_mode)) {
-			dev_t st_dev = st.st_dev;
-			ino_t st_ino = st.st_ino;
-			char *p = xasprintf("%s/..", arg);
+		if (stat(p, &st) == 0) {
+			//int is_mnt = (st_dev != st.st_dev) || (st_dev == st.st_dev && st_ino == st.st_ino);
+			int is_not_mnt = (st_dev == st.st_dev) && (st_ino != st.st_ino);
 
-			if (stat(p, &st) == 0) {
-				int ret = (st_dev != st.st_dev) ||
-					(st_dev == st.st_dev && st_ino == st.st_ino);
-				if (opt & OPT_d)
-					printf("%u:%u\n", major(st_dev), minor(st_dev));
-				else if (!(opt & OPT_q))
-					printf("%s is %sa mountpoint\n", arg, ret?"":"not ");
-				return !ret;
-			}
-		} else {
-			if (!(opt & OPT_q))
-				bb_error_msg("%s: not a directory", arg);
-			return EXIT_FAILURE;
+			if (opt & OPT_d)
+				printf("%u:%u\n", major(st_dev), minor(st_dev));
+			if (opt & OPT_n)
+				printf("%s %s\n", find_block_device(arg), arg);
+			if (!(opt & (OPT_q | OPT_d | OPT_n)))
+				printf("%s is %sa mountpoint\n", arg, is_not_mnt ? "not " : "");
+			return is_not_mnt;
 		}
+		arg = p;
+		/* else: stat had set errno, just fall through */
 	}
+
+ err:
 	if (!(opt & OPT_q))
-		bb_simple_perror_msg(arg);
+		bb_perror_msg(msg, arg);
 	return EXIT_FAILURE;
 }
