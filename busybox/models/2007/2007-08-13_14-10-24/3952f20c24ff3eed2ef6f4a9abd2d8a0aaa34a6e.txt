2007-08-13 14:10:24 +0000
diff --git a/coreutils/Config.in b/coreutils/Config.in
index cb5241e..3370b2a 100644
--- a/coreutils/Config.in
+++ b/coreutils/Config.in
@@ -200,6 +200,19 @@ config FEATURE_ENV_LONG_OPTIONS
 	help
 	  Support long options for the env applet.
 
+config EXPAND
+	bool "expand"
+	default n
+	help
+	  By default, convert all tabs to spaces.
+
+config FEATURE_EXPAND_LONG_OPTIONS
+	bool "Enable long options"
+	default n
+	depends on EXPAND && GETOPT_LONG
+	help
+	  Support long options for the expand applet.
+
 config EXPR
 	bool "expr"
 	default n
@@ -655,6 +668,19 @@ config UNAME
 	help
 	  uname is used to print system information.
 
+config UNEXPAND
+	bool "unexpand"
+	default n
+	help
+	  By default, convert only leading sequences of blanks to tabs.
+
+config FEATURE_UNEXPAND_LONG_OPTIONS
+	bool "Enable long options"
+	default n
+	depends on UNEXPAND && GETOPT_LONG
+	help
+	  Support long options for the unexpand applet.
+
 config UNIQ
 	bool "uniq"
 	default n
diff --git a/coreutils/Kbuild b/coreutils/Kbuild
index fd67d6c..ce21b3a 100644
--- a/coreutils/Kbuild
+++ b/coreutils/Kbuild
@@ -31,6 +31,7 @@ lib-$(CONFIG_ECHO)      += echo.o
 lib-$(CONFIG_ASH)       += echo.o # used by ash
 lib-$(CONFIG_ENV)       += env.o
 lib-$(CONFIG_EXPR)      += expr.o
+lib-$(CONFIG_EXPAND)    += expand.o
 lib-$(CONFIG_FALSE)     += false.o
 lib-$(CONFIG_FOLD)      += fold.o
 lib-$(CONFIG_HEAD)      += head.o
@@ -74,6 +75,7 @@ lib-$(CONFIG_TR)        += tr.o
 lib-$(CONFIG_TRUE)      += true.o
 lib-$(CONFIG_TTY)       += tty.o
 lib-$(CONFIG_UNAME)     += uname.o
+lib-$(CONFIG_UNEXPAND)  += expand.o
 lib-$(CONFIG_UNIQ)      += uniq.o
 lib-$(CONFIG_USLEEP)    += usleep.o
 lib-$(CONFIG_UUDECODE)  += uudecode.o
diff --git a/coreutils/expand.c b/coreutils/expand.c
new file mode 100644
index 0000000..30815ff
--- /dev/null
+++ b/coreutils/expand.c
@@ -0,0 +1,209 @@
+/* expand - convert tabs to spaces
+ * unexpand - convert spaces to tabs
+ *
+ * Copyright (C) 89, 91, 1995-2006 Free Software Foundation, Inc.
+ *
+ * Licensed under GPLv2 or later, see file LICENSE in this tarball for details.
+ *
+ * David MacKenzie <djm@gnu.ai.mit.edu>
+ *
+ * Options for expand:
+ * -t num  --tabs=NUM      Convert tabs to num spaces (default 8 spaces).
+ * -i      --initial       Only convert initial tabs on each line to spaces.
+ *
+ * Options for unexpand:
+ * -a      --all           Convert all blanks, instead of just initial blanks.
+ * -f      --first-only    Convert only leading sequences of blanks (default).
+ * -t num  --tabs=NUM      Have tabs num characters apart instead of 8.
+ *
+ *  Busybox version (C) 2007 by Tito Ragusa <farmatito@tiscali.it>
+ *
+ *  Caveat: this versions of expand and unexpand don't accept tab lists.
+ */
+
+#include "libbb.h"
+
+enum {
+	OPT_INITIAL     = 1 << 0,
+	OPT_TABS        = 1 << 1,
+	OPT_ALL         = 1 << 2,
+};
+
+static void xputchar(char c)
+{
+	if (putchar(c) < 0)
+		bb_error_msg_and_die(bb_msg_write_error);
+}
+
+#if ENABLE_EXPAND
+static void expand(FILE *file, unsigned tab_size, unsigned opt)
+{
+	char *line;
+	char *ptr;
+	int convert;
+	int pos;
+
+	/* Increment tab_size by 1 locally.*/
+	tab_size++;
+
+	while ((line = xmalloc_fgets(file)) != NULL) {
+		convert = 1;
+		pos = 0;
+		ptr = line;
+		while (*line) {
+			pos++;
+			if (*line == '\t' && convert) {
+				for (; pos < tab_size; pos++) {
+					xputchar(' ');
+				}
+			} else {
+				if ((opt & OPT_INITIAL) && !isblank(*line)) {
+					convert = 0;
+				}
+				xputchar(*line);
+			}
+			if (pos == tab_size) {
+				pos = 0;
+			}
+			line++;
+		}
+		free(ptr);
+	}
+}
+#endif
+
+#if ENABLE_UNEXPAND
+static void unexpand(FILE *file, unsigned int tab_size, unsigned opt)
+{
+	char *line;
+	char *ptr;
+	int convert;
+	int pos;
+	int i = 0;
+	int column = 0;
+
+	while ((line = xmalloc_fgets(file)) != NULL) {
+		convert = 1;
+		pos = 0;
+		ptr = line;
+		while (*line) {
+			while ((*line == ' ' || *line == '\t') && convert) {
+				pos += (*line == ' ') ? 1 : tab_size;
+				line++;
+				column++;
+				if ((opt & OPT_ALL) && column == tab_size) {
+					column = 0;
+					goto put_tab;
+				}
+			}
+			if (pos) {
+				i = pos / tab_size;
+				if (i) {
+					for (; i > 0; i--) {
+ put_tab:
+						xputchar('\t');
+					}
+				} else {
+					for (i = pos % tab_size; i > 0; i--) {
+						xputchar(' ');
+					}
+				}
+				pos = 0;
+			} else {
+				if (opt & OPT_INITIAL) {
+					convert = 0;
+				}
+				if (opt & OPT_ALL) {
+					column++;
+				}
+				xputchar(*line);
+				line++;
+			}
+		}
+		free(ptr);
+	}
+}
+#endif
+
+int expand_main(int argc, char **argv);
+int expand_main(int argc, char **argv)
+{
+	/* Default 8 spaces for 1 tab */
+	const char *opt_t = "8";
+	FILE *file;
+	unsigned tab_size;
+	unsigned opt;
+	int exit_status = EXIT_SUCCESS;
+
+#if ENABLE_FEATURE_EXPAND_LONG_OPTIONS
+	static const char expand_longopts[] ALIGN1 =
+		/* name, has_arg, val */
+		"initial\0"          No_argument       "i"
+		"tabs\0"             Required_argument "t"
+	;
+#endif
+#if ENABLE_FEATURE_UNEXPAND_LONG_OPTIONS
+	static const char unexpand_longopts[] ALIGN1 =
+		/* name, has_arg, val */
+		"first-only\0"       No_argument       "i"
+		"tabs\0"             Required_argument "t"
+		"all\0"              No_argument       "a"
+	;
+#endif
+
+	if (ENABLE_EXPAND && (!ENABLE_UNEXPAND || applet_name[0] == 'e')) {
+		USE_FEATURE_EXPAND_LONG_OPTIONS(applet_long_options = expand_longopts);
+		opt = getopt32(argc, argv, "it:", &opt_t);
+	} else if (ENABLE_UNEXPAND) {
+		USE_FEATURE_UNEXPAND_LONG_OPTIONS(applet_long_options = unexpand_longopts);
+		/* -t NUM sets also -a */
+		opt_complementary = "ta";
+		opt = getopt32(argc, argv, "ft:a", &opt_t);
+		/* -f --first-only is the default */
+		if (!(opt & OPT_ALL)) opt |= OPT_INITIAL;
+	}
+	tab_size = xatou_range(opt_t, 1, UINT_MAX);
+
+	argv += optind;
+
+	/* If no args are given, read from stdin */
+	if (!*argv) {
+		*--argv = (char*)bb_msg_standard_input;
+		goto use_stdin;
+	}
+
+	do {
+		if (NOT_LONE_CHAR(*argv, '-')) {
+			file = fopen_or_warn(*argv, "r");
+			if (!file) {
+				exit_status = EXIT_FAILURE;
+				continue;
+			}
+		} else {
+ use_stdin:
+			file = stdin;
+		}
+
+		if (ENABLE_EXPAND && (!ENABLE_UNEXPAND || applet_name[0] == 'e'))
+			USE_EXPAND(expand(file, tab_size, opt));
+		else if (ENABLE_UNEXPAND)
+			USE_UNEXPAND(unexpand(file, tab_size, opt));
+
+		/* Check and close the file */
+		/* We do want all of them to execute, thus | instead of || */
+		if (ferror(file) | fclose_if_not_stdin(file)) {
+			bb_perror_msg("%s", *argv);
+			exit_status = EXIT_FAILURE;
+		}
+		/* If stdin also clear EOF */
+		if (file == stdin) 
+			clearerr(file);
+	} while (*++argv);
+
+	/* Now close stdin also */
+	/* (if we didn't read from it, it's a no-op) */
+	if (fclose(stdin))
+		bb_perror_msg_and_die(bb_msg_standard_input);
+
+	fflush_stdout_and_exit(exit_status);
+}
diff --git a/coreutils/expr.c b/coreutils/expr.c
index 318fee7..c2d9669 100644
--- a/coreutils/expr.c
+++ b/coreutils/expr.c
@@ -505,5 +505,3 @@ int expr_main(int argc, char **argv)
 
 	fflush_stdout_and_exit(null(v));
 }
-
-
diff --git a/include/applets.h b/include/applets.h
index b5b9fc8..f92ce4b 100644
--- a/include/applets.h
+++ b/include/applets.h
@@ -134,6 +134,7 @@ USE_ENV(APPLET(env, _BB_DIR_USR_BIN, _BB_SUID_NEVER))
 USE_ENVDIR(APPLET_ODDNAME(envdir, chpst, _BB_DIR_USR_BIN, _BB_SUID_NEVER, envdir))
 USE_ENVUIDGID(APPLET_ODDNAME(envuidgid, chpst, _BB_DIR_USR_BIN, _BB_SUID_NEVER, envuidgid))
 USE_ETHER_WAKE(APPLET_ODDNAME(ether-wake, ether_wake, _BB_DIR_USR_BIN, _BB_SUID_NEVER, ether_wake))
+USE_EXPAND(APPLET(expand, _BB_DIR_USR_BIN, _BB_SUID_NEVER))
 USE_EXPR(APPLET(expr, _BB_DIR_USR_BIN, _BB_SUID_NEVER))
 USE_FAKEIDENTD(APPLET(fakeidentd, _BB_DIR_USR_SBIN, _BB_SUID_NEVER))
 USE_FALSE(APPLET_NOFORK(false, false, _BB_DIR_BIN, _BB_SUID_NEVER, false))
@@ -345,6 +346,7 @@ USE_UDPSVD(APPLET_ODDNAME(udpsvd, tcpudpsvd, _BB_DIR_USR_BIN, _BB_SUID_NEVER, ud
 USE_UMOUNT(APPLET(umount, _BB_DIR_BIN, _BB_SUID_NEVER))
 USE_UNAME(APPLET(uname, _BB_DIR_BIN, _BB_SUID_NEVER))
 USE_UNCOMPRESS(APPLET(uncompress, _BB_DIR_BIN, _BB_SUID_NEVER))
+USE_UNEXPAND(APPLET_ODDNAME(unexpand, expand, _BB_DIR_USR_BIN, _BB_SUID_NEVER, unexpand))
 USE_UNIQ(APPLET(uniq, _BB_DIR_USR_BIN, _BB_SUID_NEVER))
 USE_UNIX2DOS(APPLET_ODDNAME(unix2dos, dos2unix, _BB_DIR_USR_BIN, _BB_SUID_NEVER, unix2dos))
 USE_UNLZMA(APPLET(unlzma, _BB_DIR_USR_BIN, _BB_SUID_NEVER))
diff --git a/include/usage.h b/include/usage.h
index f5025b7..d01e3e4 100644
--- a/include/usage.h
+++ b/include/usage.h
@@ -844,6 +844,16 @@
        "	-i iface	Use interface ifname instead of the default \"eth0\"\n" \
        "	-p pass		Append the four or six byte password PW to the packet"
 
+#define expand_trivial_usage \
+       "[-i] [-t NUM] [FILE|-]"
+#define expand_full_usage \
+       "Convert tabs to spaces, writing to standard output." \
+       "\n\nOptions:" \
+       "\n	-i" USE_FEATURE_EXPAND_LONG_OPTIONS(",--initial") \
+       "	Do not convert tabs after non blanks" \
+       "\n	-t" USE_FEATURE_EXPAND_LONG_OPTIONS(",--tabs=N") \
+       "	Tabstops every N chars"
+
 #define expr_trivial_usage \
        "EXPRESSION"
 #define expr_full_usage \
@@ -3707,6 +3717,18 @@ USE_FEATURE_RUN_PARTS_FANCY("\n	-l	Prints names of all matching files even when
        "	-c	Extract to stdout\n" \
        "	-f	Force overwrite an existing file"
 
+#define unexpand_trivial_usage \
+       "[-f][-a][-t NUM] [FILE|-]"
+#define unexpand_full_usage \
+       "Convert spaces to tabs, writing to standard output." \
+       "\n\nOptions:" \
+       "\n	-a" USE_FEATURE_UNEXPAND_LONG_OPTIONS(",--all") \
+       "	Convert all blanks" \
+       "\n	-f" USE_FEATURE_UNEXPAND_LONG_OPTIONS(",--first-only") \
+       "	Convert only leading sequences of blanks" \
+       "\n	-t" USE_FEATURE_UNEXPAND_LONG_OPTIONS(",--tabs=N") \
+       "	Tabstops every N chars"
+
 #define uniq_trivial_usage \
        "[-fscdu]... [INPUT [OUTPUT]]"
 #define uniq_full_usage \
diff --git a/libbb/fflush_stdout_and_exit.c b/libbb/fflush_stdout_and_exit.c
index 48889da..9f05500 100644
--- a/libbb/fflush_stdout_and_exit.c
+++ b/libbb/fflush_stdout_and_exit.c
@@ -16,7 +16,7 @@
 void fflush_stdout_and_exit(int retval)
 {
 	if (fflush(stdout))
-		xfunc_die();
+		bb_perror_msg_and_die(bb_msg_standard_output);
 
 	if (ENABLE_FEATURE_PREFER_APPLETS && die_sleep < 0) {
 		/* We are in NOFORK applet. Do not exit() directly,
diff --git a/scripts/defconfig b/scripts/defconfig
index 4709b22..f24fe95 100644
--- a/scripts/defconfig
+++ b/scripts/defconfig
@@ -152,6 +152,8 @@ CONFIG_ECHO=y
 CONFIG_FEATURE_FANCY_ECHO=y
 CONFIG_ENV=y
 CONFIG_FEATURE_ENV_LONG_OPTIONS=y
+CONFIG_EXPAND=y
+CONFIG_FEATURE_EXPAND_LONG_OPTIONS=y
 CONFIG_EXPR=y
 CONFIG_EXPR_MATH_SUPPORT_64=y
 CONFIG_FALSE=y
@@ -218,6 +220,8 @@ CONFIG_FEATURE_TR_EQUIV=y
 CONFIG_TRUE=y
 CONFIG_TTY=y
 CONFIG_UNAME=y
+CONFIG_UNEXPAND=y
+CONFIG_FEATURE_UNEXPAND_LONG_OPTIONS=y
 CONFIG_UNIQ=y
 CONFIG_USLEEP=y
 CONFIG_UUDECODE=y
diff --git a/testsuite/expand/expand-works-like-GNU b/testsuite/expand/expand-works-like-GNU
new file mode 100644
index 0000000..ee8c793
--- /dev/null
+++ b/testsuite/expand/expand-works-like-GNU
@@ -0,0 +1,18 @@
+rm -f foo bar
+echo -e "\ty" | expand -t 3 ../../busybox > foo
+echo -e "\ty" | busybox unexpand -t 3 ../../busybox > bar
+set +e
+test ! -f foo -a -f bar
+if [ $? = 0 ] ; then
+	set -e
+	diff -q foo bar
+fi
+rm -f foo bar
+echo -e "\ty\tx" | expand -it 3 ../../busybox > foo
+echo -e "\ty\tx" | busybox unexpand -it 3 ../../busybox > bar
+set +e
+test ! -f foo -a -f bar
+if [ $? = 0 ] ; then
+	set -e
+	diff -q foo bar
+fi
diff --git a/testsuite/unexpand/unexpand-works-like-GNU b/testsuite/unexpand/unexpand-works-like-GNU
new file mode 100644
index 0000000..a525836
--- /dev/null
+++ b/testsuite/unexpand/unexpand-works-like-GNU
@@ -0,0 +1,52 @@
+rm -f foo bar
+echo "       y" | unexpand ../../busybox > foo
+echo "       y" | busybox unexpand ../../busybox > bar
+set +e
+test ! -f foo -a -f bar
+if [ $? = 0 ] ; then
+	set -e
+	diff -q foo bar
+fi
+rm -f foo bar
+echo "        y" | unexpand ../../busybox > foo
+echo "        y" | busybox unexpand ../../busybox > bar
+set +e
+test ! -f foo -a -f bar
+if [ $? = 0 ] ; then
+	set -e
+	diff -q foo bar
+fi
+echo "       y       y" | unexpand ../../busybox > foo
+echo "       y       y" | busybox unexpand ../../busybox > bar
+set +e
+test ! -f foo -a -f bar
+if [ $? = 0 ] ; then
+	set -e
+	diff -q foo bar
+fi
+rm -f foo bar
+echo "        y        y" | unexpand ../../busybox > foo
+echo "        y        y" | busybox unexpand ../../busybox > bar
+set +e
+test ! -f foo -a -f bar
+if [ $? = 0 ] ; then
+	set -e
+	diff -q foo bar
+fi
+echo "       y       y" | unexpand -a ../../busybox > foo
+echo "       y       y" | busybox unexpand -a ../../busybox > bar
+set +e
+test ! -f foo -a -f bar
+if [ $? = 0 ] ; then
+	set -e
+	diff -q foo bar
+fi
+rm -f foo bar
+echo "        y        y" | unexpand -a ../../busybox > foo
+echo "        y        y" | busybox unexpand -a ../../busybox > bar
+set +e
+test ! -f foo -a -f bar
+if [ $? = 0 ] ; then
+	set -e
+	diff -q foo bar
+fi
