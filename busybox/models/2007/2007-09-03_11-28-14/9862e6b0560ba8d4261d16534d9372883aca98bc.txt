2007-09-03 11:28:14 +0000
diff --git a/scripts/trylink b/scripts/trylink
index cede22b..0b8f6c0 100755
--- a/scripts/trylink
+++ b/scripts/trylink
@@ -14,9 +14,8 @@ try() {
 BBOX_LIB_LIST=`echo "$BBOX_LIB_LIST" | xargs -n1 | sort | uniq | xargs`
 
 # First link with all libs. If it fails, bail out
-l_list=`echo "$BBOX_LIB_LIST" | sed -e 's/ / -l/g' -e 's/^/-l/' -e 's/^-l$//'`
-
 echo "Trying libraries: $BBOX_LIB_LIST"
+l_list=`echo "$BBOX_LIB_LIST" | sed -e 's/ / -l/g' -e 's/^/-l/' -e 's/^-l$//'`
 test "x$l_list" != "x" && l_list="-Wl,--start-group $l_list -Wl,--end-group"
 try "$l_list" "$@" \
 || {
@@ -25,16 +24,8 @@ try "$l_list" "$@" \
     exit 1
 }
 
-#### Hack disabled: conflicts with ld --verbose flag in last link phase
-
-##### Hack: we are not supposed to know executable name,
-##### but this hack cuts down link time
-####mv busybox_unstripped busybox_unstripped.tmp
-####mv busybox.map        busybox.map.tmp
-
 # Now try to remove each lib and build without it.
 # Stop when no lib can be removed.
-####ever_discarded=false
 while test "$BBOX_LIB_LIST"; do
     $debug && echo "Trying libraries: $BBOX_LIB_LIST"
     all_needed=true
@@ -47,7 +38,6 @@ while test "$BBOX_LIB_LIST"; do
 		echo "Library $one is not needed"
 		BBOX_LIB_LIST="$without_one"
 		all_needed=false
-####		ever_discarded=true
 	else
 		echo "Library $one is needed"
 	fi
@@ -60,26 +50,19 @@ while test "$BBOX_LIB_LIST"; do
     #{ echo "$BBOX_LIB_LIST" | grep -q ' '; } || break
 done
 
-####mv busybox_unstripped.tmp busybox_unstripped
-####mv busybox.map.tmp        busybox.map
-####$ever_discarded && {
-    # Make the binary with final, minimal list of libs
-    echo "Final link with: $BBOX_LIB_LIST"
-    l_list=`echo "$BBOX_LIB_LIST" | sed -e 's/ / -l/g' -e 's/^/-l/' -e 's/^-l$//'`
-    # --verbose gives us gobs of info to stdout (e.g. linker script used)
-    test "x$l_list" != "x" && l_list="-Wl,--start-group $l_list -Wl,--end-group -Wl,--verbose"
-    if ! test -f busybox_ldscript; then
-
-	try "$l_list" "$@" >busybox_ld.out ####|| exit 1
-    else
-	echo "Custom linker script 'busybox_ldscript' found, using it"
-	# Add SORT_BY_ALIGNMENT to linker script (found in busybox_ld.out):
-	#  .rodata         : { *(.rodata SORT_BY_ALIGNMENT(.rodata.*) .gnu.linkonce.r.*) }
-	#  *(.data SORT_BY_ALIGNMENT(.data.*) .gnu.linkonce.d.*)
-	#  *(.bss SORT_BY_ALIGNMENT(.bss.*) .gnu.linkonce.b.*)
-	# This will eliminate most of the data padding (~3kb).
-	try "$l_list -Wl,-T -Wl,busybox_ldscript" "$@" >busybox_ld.out
-    fi
-####}
-####rm busybox_ld.err
-####exit 0  # Ensure "success" exit code
+# Make the binary with final, minimal list of libs
+echo "Final link with: $BBOX_LIB_LIST"
+l_list=`echo "$BBOX_LIB_LIST" | sed -e 's/ / -l/g' -e 's/^/-l/' -e 's/^-l$//'`
+test "x$l_list" != "x" && l_list="-Wl,--start-group $l_list -Wl,--end-group -Wl,--verbose"
+# --verbose gives us gobs of info to stdout (e.g. linker script used)
+if ! test -f busybox_ldscript; then
+    try "$l_list -Wl,--verbose" "$@" >busybox_ld.out
+else
+    echo "Custom linker script 'busybox_ldscript' found, using it"
+    # Add SORT_BY_ALIGNMENT to linker script (found in busybox_ld.out):
+    #  .rodata         : { *(.rodata SORT_BY_ALIGNMENT(.rodata.*) .gnu.linkonce.r.*) }
+    #  *(.data SORT_BY_ALIGNMENT(.data.*) .gnu.linkonce.d.*)
+    #  *(.bss SORT_BY_ALIGNMENT(.bss.*) .gnu.linkonce.b.*)
+    # This will eliminate most of the data padding (~3kb).
+    try "$l_list -Wl,--verbose -Wl,-T -Wl,busybox_ldscript" "$@" >busybox_ld.out
+fi
