2007-09-23 18:34:49 +0000
diff --git a/debianutils/run_parts.c b/debianutils/run_parts.c
index 0104eb1..56f70c6 100644
--- a/debianutils/run_parts.c
+++ b/debianutils/run_parts.c
@@ -34,27 +34,32 @@
 
 #include "libbb.h"
 
-#if ENABLE_FEATURE_RUN_PARTS_LONG_OPTIONS
-static const char runparts_longopts[] ALIGN1 =
-	"arg\0"     Required_argument "a"
-	"umask\0"   Required_argument "u"
-	"test\0"    No_argument       "t"
-#if ENABLE_FEATURE_RUN_PARTS_FANCY
-	"list\0"    No_argument       "l"
-//TODO: "reverse\0" No_argument       "r"
-//TODO: "verbose\0" No_argument       "v"
-#endif
-	;
-#endif
-
 struct globals {
-	smalluint mode;
-	char *cmd[10]; /* merely arbitrary arg count */
+	char **names;
+	int    cur;
+	char  *cmd[1];
 };
 #define G (*(struct globals*)&bb_common_bufsiz1)
+#define names (G.names)
+#define cur   (G.cur  )
+#define cmd   (G.cmd  )
+
+enum { NUM_CMD = (COMMON_BUFSIZE - sizeof(struct globals)) / sizeof(cmd[0]) };
+
+enum {
+	RUN_PARTS_OPT_a = (1 << 0),
+	RUN_PARTS_OPT_u = (1 << 1),
+	RUN_PARTS_OPT_t = (1 << 2),
+	RUN_PARTS_OPT_l = (1 << 3) * ENABLE_FEATURE_RUN_PARTS_FANCY,
+};
+
+#if ENABLE_FEATURE_RUN_PARTS_FANCY
+#define list_mode (option_mask32 & RUN_PARTS_OPT_l)
+#else
+#define list_mode 0
+#endif
 
-/* valid_name */
-/* True or false? Is this a valid filename (upper/lower alpha, digits,
+/* Is this a valid filename (upper/lower alpha, digits,
  * underscores, and hyphens only?)
  */
 static bool invalid_name(const char *c)
@@ -67,80 +72,103 @@ static bool invalid_name(const char *c)
 	return *c; /* TRUE (!0) if terminating NUL is not reached */
 }
 
-#define RUN_PARTS_OPT_a (1<<0)
-#define RUN_PARTS_OPT_u (1<<1)
-#define RUN_PARTS_OPT_t (1<<2)
-#if ENABLE_FEATURE_RUN_PARTS_FANCY
-#define RUN_PARTS_OPT_l (1<<3)
-#endif
-
-#define test_mode (G.mode & RUN_PARTS_OPT_t)
-#if ENABLE_FEATURE_RUN_PARTS_FANCY
-#define list_mode (G.mode & RUN_PARTS_OPT_l)
-#else
-#define list_mode (0)
-#endif
+static int bb_alphasort(const void *p1, const void *p2)
+{
+	return strcmp(*(char **) p1, *(char **) p2);
+}
 
 static int act(const char *file, struct stat *statbuf, void *args, int depth)
 {
-	int ret;
-
 	if (depth == 1)
 		return TRUE;
 
-	if (depth == 2 &&
-		((!list_mode && access(file, X_OK)) ||
-		 invalid_name(file) ||
-		 !(statbuf->st_mode & (S_IFREG | S_IFLNK))) )
+	if (depth == 2
+	 && (  !(statbuf->st_mode & (S_IFREG | S_IFLNK))
+	    || invalid_name(file)
+	    || (!list_mode && access(file, X_OK) != 0))
+	) {
 		return SKIP;
-
-	if (test_mode || list_mode) {
-		puts(file);
-		return TRUE;
 	}
-	G.cmd[0] = (char*)file;
-	ret = wait4pid(spawn(G.cmd));
-	if (ret < 0) {
-		bb_perror_msg("failed to exec %s", file);
-	} else if (ret > 0) {
-		bb_error_msg("%s exited with return code %d", file, ret);
-	}
-	return !ret;
+
+	names = xrealloc(names, (cur + 2) * sizeof(names[0]));
+	names[cur++] = xstrdup(file);
+	names[cur] = NULL;
+
+	return TRUE;
 }
 
+#if ENABLE_FEATURE_RUN_PARTS_LONG_OPTIONS
+static const char runparts_longopts[] ALIGN1 =
+	"arg\0"     Required_argument "a"
+	"umask\0"   Required_argument "u"
+	"test\0"    No_argument       "t"
+#if ENABLE_FEATURE_RUN_PARTS_FANCY
+	"list\0"    No_argument       "l"
+//TODO: "reverse\0" No_argument       "r"
+//TODO: "verbose\0" No_argument       "v"
+#endif
+	;
+#endif
+
 int run_parts_main(int argc, char **argv);
 int run_parts_main(int argc, char **argv)
 {
-	char *umask_p;
+	const char *umask_p = "22";
 	llist_t *arg_list = NULL;
-	unsigned tmp;
+	unsigned n;
+	int ret;
 
-	umask(022);
-	/* We require exactly one argument: the directory name */
-	opt_complementary = "=1:a::";
 #if ENABLE_FEATURE_RUN_PARTS_LONG_OPTIONS
 	applet_long_options = runparts_longopts;
 #endif
-	tmp = getopt32(argv, "a:u:t"USE_FEATURE_RUN_PARTS_FANCY("l"), &arg_list, &umask_p);
-	G.mode = tmp &~ (RUN_PARTS_OPT_a|RUN_PARTS_OPT_u);
-	if (tmp & RUN_PARTS_OPT_u) {
-		/* Check and set the umask of the program executed.
-		 * As stated in the original run-parts, the octal conversion in
-		 * libc is not foolproof; it will take the 8 and 9 digits under
-		 * some circumstances. We'll just have to live with it.
-		 */
-		umask(xstrtoul_range(umask_p, 8, 0, 07777));
+	/* We require exactly one argument: the directory name */
+	opt_complementary = "=1:a::";
+	getopt32(argv, "a:u:t"USE_FEATURE_RUN_PARTS_FANCY("l"), &arg_list, &umask_p);
+
+	umask(xstrtou_range(umask_p, 8, 0, 07777));
+
+	n = 1;
+	while (arg_list && n < NUM_CMD) {
+		cmd[n] = arg_list->data;
+		arg_list = arg_list->link;
+		n++;
 	}
-	for (tmp = 1; arg_list; arg_list = arg_list->link, tmp++)
-		G.cmd[tmp] = arg_list->data;
-	/* G.cmd[tmp] = NULL; - G is already zeroed out */
-	if (!recursive_action(argv[argc - 1],
+	/* cmd[n] = NULL; - is already zeroed out */
+
+	/* run-parts has to sort executables by name before running them */
+
+	recursive_action(argv[optind],
 			ACTION_RECURSE|ACTION_FOLLOWLINKS,
-			act,		/* file action */
-			act,		/* dir action */
-			NULL,		/* user data */
-			1			/* depth */
-			))
-			return EXIT_FAILURE;
-	return EXIT_SUCCESS;
+			act,            /* file action */
+			act,            /* dir action */
+			NULL,           /* user data */
+			1               /* depth */
+		);
+
+	if (!names)
+		return 0;
+
+	qsort(names, cur, sizeof(char *), bb_alphasort);
+
+	n = 0;
+	while (1) {
+		char *name = *names++;
+		if (!name)
+			break;
+		if (option_mask32 & (RUN_PARTS_OPT_t | RUN_PARTS_OPT_l)) {
+			puts(name);
+			continue;
+		}
+		cmd[0] = name;
+		ret = wait4pid(spawn(cmd));
+		if (ret == 0)
+			continue;
+		n = 1;
+		if (ret < 0)
+			bb_perror_msg("failed to exec %s", name);
+		else /* ret > 0 */
+			bb_error_msg("%s exited with return code %d", name, ret);
+	}
+
+	return n;
 }
