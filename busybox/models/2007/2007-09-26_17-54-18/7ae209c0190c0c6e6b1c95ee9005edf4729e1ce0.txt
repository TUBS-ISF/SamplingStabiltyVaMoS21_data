2007-09-26 17:54:18 +0000
diff --git a/include/usage.h b/include/usage.h
index 09c8fa7..b028f5a 100644
--- a/include/usage.h
+++ b/include/usage.h
@@ -1868,19 +1868,21 @@
        "	-f	Output data as the log grows"
 
 #define losetup_trivial_usage \
-       "[-o OFFSET] [-d] LOOPDEVICE [FILE]]"
+       "[-o OFS] LOOPDEV FILE - associate loop devices\n" \
+       "	losetup -d LOOPDEV - disassociate\n" \
+       "	losetup [-f] - show"
 #define losetup_full_usage \
-       "(Dis)associate LOOPDEVICE with FILE, or display current associations" \
-       "\n\nOptions:\n" \
-       "	-d		Disassociate LOOPDEVICE\n" \
-       "	-o OFFSET	Start OFFSET bytes into FILE"
+       "Options:\n" \
+       "	-o OFS	Start OFS bytes into FILE\n" \
+       "	-f	Show first free loop device"
 #define losetup_notes_usage \
        "No arguments will display all current associations.\n" \
        "One argument (losetup /dev/loop1) will display the current association\n" \
        "(if any), or disassociate it (with -d). The display shows the offset\n" \
        "and filename of the file the loop device is currently bound to.\n\n" \
        "Two arguments (losetup /dev/loop1 file.img) create a new association,\n" \
-       "with an optional offset (-o 12345). Encryption is not yet supported.\n\n"
+       "with an optional offset (-o 12345). Encryption is not yet supported.\n" \
+       "losetup -f will show the first loop free loop device\n\n"
 
 #define ls_trivial_usage \
        "[-1Aa" USE_FEATURE_LS_TIMESTAMPS("c") "Cd" \
diff --git a/util-linux/losetup.c b/util-linux/losetup.c
index 9409cdf..57e8569 100644
--- a/util-linux/losetup.c
+++ b/util-linux/losetup.c
@@ -14,54 +14,68 @@
 int losetup_main(int argc, char **argv);
 int losetup_main(int argc, char **argv)
 {
+	char dev[] = LOOP_NAME"0";
 	unsigned opt;
 	char *opt_o;
+	char *s;
 	unsigned long long offset = 0;
 
-	opt = getopt32(argv, "do:", &opt_o);
+	/* max 2 args, all opts are mutially exclusive */
+	opt_complementary = "?2:d--of:o--df:f-do";
+	opt = getopt32(argv, "do:f", &opt_o);
 	argc -= optind;
 	argv += optind;
 
-	if (opt == 0x3) // -d + -o (illegal)
+	if (opt == 0x2) // -o
+		offset = xatoull(opt_o);
+
+	if (opt == 0x4 && argc) // -f does not take any argument
 		bb_show_usage();
 
 	if (opt == 0x1) { // -d
 		/* detach takes exactly one argument */
 		if (argc != 1)
 			bb_show_usage();
-		if (!del_loop(argv[0]))
-			return EXIT_SUCCESS;
-		bb_perror_nomsg_and_die();
+		if (del_loop(argv[0]))
+			bb_perror_nomsg_and_die();
+		return EXIT_SUCCESS;
 	}
 
-	if (opt == 0x2) // -o
-		offset = xatoull(opt_o);
-
-	/* -o or no option */
-
 	if (argc == 2) {
+		/* -o or no option */
 		if (set_loop(&argv[0], argv[1], offset) < 0)
 			bb_perror_nomsg_and_die();
-	} else if (argc == 1) {
-		char *s = query_loop(argv[0]);
+		return EXIT_SUCCESS;
+	}
+
+	if (argc == 1) {
+		/* -o or no option */
+		s = query_loop(argv[0]);
 		if (!s)
 			bb_perror_nomsg_and_die();
 		printf("%s: %s\n", argv[0], s);
 		if (ENABLE_FEATURE_CLEAN_UP)
 			free(s);
-	} else {
-		char dev[sizeof(LOOP_NAME"0")] = LOOP_NAME"0";
-		char c;
-		for (c = '0'; c <= '9'; ++c) {
-			char *s;
-			dev[sizeof(LOOP_NAME"0")-2] = c;
-			s = query_loop(dev);
-			if (s) {
-				printf("%s: %s\n", dev, s);
-				if (ENABLE_FEATURE_CLEAN_UP)
-					free(s);
+		return EXIT_SUCCESS;
+	}
+
+	/* -o, -f or no option */
+	while (1) {
+		s = query_loop(dev);
+		if (!s) {
+			if (opt == 0x4) {
+				printf("%s\n", dev);
+				return EXIT_SUCCESS;
 			}
+		} else {
+			if (opt != 0x4)
+				printf("%s: %s\n", dev, s);
+			if (ENABLE_FEATURE_CLEAN_UP)
+				free(s);
 		}
+
+		if (++dev[sizeof(dev) - 2] > '9')
+			break;
 	}
 	return EXIT_SUCCESS;
 }
