2007-10-05 20:29:31 +0000
diff --git a/archival/libunarchive/check_header_gzip.c b/archival/libunarchive/check_header_gzip.c
deleted file mode 100644
index 66aa574..0000000
--- a/archival/libunarchive/check_header_gzip.c
+++ /dev/null
@@ -1,59 +0,0 @@
-/* vi: set sw=4 ts=4: */
-/*
- * Licensed under GPLv2 or later, see file LICENSE in this tarball for details.
- */
-
-#include "libbb.h"
-#include "unarchive.h" /* for external decl of check_header_gzip_or_die */
-
-void check_header_gzip_or_die(int src_fd)
-{
-	union {
-		unsigned char raw[8];
-		struct {
-			unsigned char method;
-			unsigned char flags;
-			unsigned int mtime;
-			unsigned char xtra_flags;
-			unsigned char os_flags;
-		} formatted;
-	} header;
-
-	xread(src_fd, header.raw, 8);
-
-	/* Check the compression method */
-	if (header.formatted.method != 8) {
-		bb_error_msg_and_die("unknown compression method %d",
-						  header.formatted.method);
-	}
-
-	if (header.formatted.flags & 0x04) {
-		/* bit 2 set: extra field present */
-		unsigned extra_short;
-
-		extra_short = xread_char(src_fd) + (xread_char(src_fd) << 8);
-		while (extra_short > 0) {
-			/* Ignore extra field */
-			xread_char(src_fd);
-			extra_short--;
-		}
-	}
-
-	/* Discard original name if any */
-	if (header.formatted.flags & 0x08) {
-		/* bit 3 set: original file name present */
-		while (xread_char(src_fd) != 0);
-	}
-
-	/* Discard file comment if any */
-	if (header.formatted.flags & 0x10) {
-		/* bit 4 set: file comment present */
-		while (xread_char(src_fd) != 0);
-	}
-
-	/* Read the header checksum */
-	if (header.formatted.flags & 0x02) {
-		xread_char(src_fd);
-		xread_char(src_fd);
-	}
-}
diff --git a/coreutils/sum.c b/coreutils/sum.c
index 4a3760b..a75dd32 100644
--- a/coreutils/sum.c
+++ b/coreutils/sum.c
@@ -24,7 +24,7 @@ enum { SUM_BSD, PRINT_NAME, SUM_SYSV };
 static unsigned sum_file(const char *file, const unsigned type)
 {
 #define buf bb_common_bufsiz1
-	uintmax_t total_bytes = 0;
+	unsigned long long total_bytes = 0;
 	int fd = 0, r;
 
 	/* The sum of all the input bytes, modulo (UINT_MAX + 1).  */
@@ -67,9 +67,9 @@ static unsigned sum_file(const char *file, const unsigned type)
 	if (type >= SUM_SYSV) {
 		r = (s & 0xffff) + ((s & 0xffffffff) >> 16);
 		s = (r & 0xffff) + (r >> 16);
-		printf("%d %ju %s\n", s, (total_bytes+511)/512, file);
+		printf("%d %llu %s\n", s, (total_bytes + 511) / 512, file);
 	} else
-		printf("%05d %5ju %s\n", s, (total_bytes+1023)/1024, file);
+		printf("%05d %5llu %s\n", s, (total_bytes + 1023) / 1024, file);
 	return 1;
 #undef buf
 }
