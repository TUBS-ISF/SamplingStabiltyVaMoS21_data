2009-06-26 01:55:45 +0200
diff --git a/archival/cpio.c b/archival/cpio.c
index a6484e5..5b4135f 100644
--- a/archival/cpio.c
+++ b/archival/cpio.c
@@ -88,9 +88,17 @@ enum {
 	CPIO_OPT_PRESERVE_MTIME     = (1 << 6),
 	CPIO_OPT_DEREF              = (1 << 7),
 	CPIO_OPT_FILE               = (1 << 8),
-	CPIO_OPT_CREATE             = (1 << 9) * ENABLE_FEATURE_CPIO_O,
-	CPIO_OPT_FORMAT             = (1 << 10) * ENABLE_FEATURE_CPIO_O,
-	CPIO_OPT_PASSTHROUGH        = (1 << 11) * ENABLE_FEATURE_CPIO_P,
+	OPTBIT_FILE = 8,
+	IF_FEATURE_CPIO_O(OPTBIT_CREATE     ,)
+	IF_FEATURE_CPIO_O(OPTBIT_FORMAT     ,)
+	IF_FEATURE_CPIO_P(OPTBIT_PASSTHROUGH,)
+	IF_LONG_OPTS(     OPTBIT_QUIET      ,)
+	IF_LONG_OPTS(     OPTBIT_2STDOUT    ,)
+	CPIO_OPT_CREATE             = IF_FEATURE_CPIO_O((1 << OPTBIT_CREATE     )) + 0,
+	CPIO_OPT_FORMAT             = IF_FEATURE_CPIO_O((1 << OPTBIT_FORMAT     )) + 0,
+	CPIO_OPT_PASSTHROUGH        = IF_FEATURE_CPIO_P((1 << OPTBIT_PASSTHROUGH)) + 0,
+	CPIO_OPT_QUIET              = IF_LONG_OPTS(     (1 << OPTBIT_QUIET      )) + 0,
+	CPIO_OPT_2STDOUT            = IF_LONG_OPTS(     (1 << OPTBIT_2STDOUT    )) + 0,
 };
 
 #define OPTION_STR "it0uvdmLF:"
@@ -284,6 +292,9 @@ int cpio_main(int argc UNUSED_PARAM, char **argv)
 		"pass-through\0" No_argument       "p"
 #endif
 #endif
+		"verbose\0"      No_argument       "v"
+		"quiet\0"        No_argument       "\xff"
+		"to-stdout\0"    No_argument       "\xfe"
 		;
 #endif
 
@@ -372,6 +383,8 @@ int cpio_main(int argc UNUSED_PARAM, char **argv)
 	}
 	if (opt & CPIO_OPT_EXTRACT) {
 		archive_handle->action_data = data_extract_all;
+		if (opt & CPIO_OPT_2STDOUT)
+			archive_handle->action_data = data_extract_to_stdout;
 	}
 	if (opt & CPIO_OPT_UNCONDITIONAL) {
 		archive_handle->ah_flags |= ARCHIVE_EXTRACT_UNCONDITIONAL;
@@ -406,7 +419,9 @@ int cpio_main(int argc UNUSED_PARAM, char **argv)
 	while (get_header_cpio(archive_handle) == EXIT_SUCCESS)
 		continue;
 
-	if (archive_handle->ah_priv[2] != (void*) ~(ptrdiff_t)0)
+	if (archive_handle->ah_priv[2] != (void*) ~(ptrdiff_t)0
+	 && !(opt & CPIO_OPT_QUIET)
+	)
 		printf("%lu blocks\n", (unsigned long)(ptrdiff_t)(archive_handle->ah_priv[2]));
 
 	return EXIT_SUCCESS;
diff --git a/coreutils/Config.in b/coreutils/Config.in
index f9db067..1bc047c 100644
--- a/coreutils/Config.in
+++ b/coreutils/Config.in
@@ -667,7 +667,7 @@ config TEST
 config FEATURE_TEST_64
 	bool "Extend test to 64 bit"
 	default n
-	depends on TEST || ASH_BUILTIN_TEST
+	depends on TEST || ASH_BUILTIN_TEST || HUSH
 	help
 	  Enable 64-bit support in test.
 
diff --git a/include/applets.h b/include/applets.h
index 9296160..905bab3 100644
--- a/include/applets.h
+++ b/include/applets.h
@@ -127,6 +127,7 @@ IF_DIFF(APPLET(diff, _BB_DIR_USR_BIN, _BB_SUID_NEVER))
 IF_DIRNAME(APPLET_NOFORK(dirname, dirname, _BB_DIR_USR_BIN, _BB_SUID_NEVER, dirname))
 IF_DMESG(APPLET(dmesg, _BB_DIR_BIN, _BB_SUID_NEVER))
 IF_DNSD(APPLET(dnsd, _BB_DIR_USR_SBIN, _BB_SUID_ALWAYS))
+IF_HOSTNAME(APPLET_ODDNAME(dnsdomainname, hostname, _BB_DIR_BIN, _BB_SUID_NEVER, dnsdomainname))
 IF_DOS2UNIX(APPLET(dos2unix, _BB_DIR_USR_BIN, _BB_SUID_NEVER))
 IF_DPKG(APPLET(dpkg, _BB_DIR_USR_BIN, _BB_SUID_NEVER))
 IF_DPKG_DEB(APPLET_ODDNAME(dpkg-deb, dpkg_deb, _BB_DIR_USR_BIN, _BB_SUID_NEVER, dpkg_deb))
diff --git a/include/usage.h b/include/usage.h
index 91bc01e..f654062 100644
--- a/include/usage.h
+++ b/include/usage.h
@@ -1675,6 +1675,9 @@
        "$ hostname\n" \
        "sage\n"
 
+#define dnsdomainname_trivial_usage NOUSAGE_STR
+#define dnsdomainname_full_usage ""
+
 #define httpd_trivial_usage \
        "[-ifv[v]]" \
        " [-c CONFFILE]" \
diff --git a/networking/hostname.c b/networking/hostname.c
index 48e70db..7a120fa 100644
--- a/networking/hostname.c
+++ b/networking/hostname.c
@@ -4,20 +4,17 @@
  *
  * Copyright (C) 1999 by Randolph Chung <tausq@debian.org>
  *
- * adjusted by Erik Andersen <andersen@codepoet.org> to remove
+ * Adjusted by Erik Andersen <andersen@codepoet.org> to remove
  * use of long options and GNU getopt.  Improved the usage info.
  *
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
- *
  * Licensed under GPLv2 or later, see file LICENSE in this tarball for details.
  */
-
 #include "libbb.h"
 
 static void do_sethostname(char *s, int isfile)
 {
-	if (!s)
-		return;
+//	if (!s)
+//		return;
 	if (isfile) {
 		parser_t *parser = config_open2(s, xfopen_for_read);
 		while (config_read(parser, &s, 1, 1, "# \t", PARSE_NORMAL & ~PARSE_GREEDY)) {
@@ -25,15 +22,65 @@ static void do_sethostname(char *s, int isfile)
 		}
 		if (ENABLE_FEATURE_CLEAN_UP)
 			config_close(parser);
-	} else if (sethostname(s, strlen(s)) < 0) {
-		if (errno == EPERM)
-			bb_error_msg_and_die(bb_msg_perm_denied_are_you_root);
+	} else if (sethostname(s, strlen(s))) {
+//		if (errno == EPERM)
+//			bb_error_msg_and_die(bb_msg_perm_denied_are_you_root);
 		bb_perror_msg_and_die("sethostname");
 	}
 }
 
+/* Manpage circa 2009:
+ *
+ * hostname [-v] [-a] [--alias] [-d] [--domain] [-f] [--fqdn] [--long] 
+ *      [-i] [--ip-address] [-s] [--short] [-y] [--yp] [--nis]
+ *
+ * hostname [-v] [-F filename] [--file filename] / [hostname]
+ *
+ * domainname [-v] [-F filename] [--file filename]  / [name]
+ *  { bbox: not supported }
+ *
+ * nodename [-v] [-F filename] [--file filename] / [name]
+ *  { bbox: not supported }
+ *
+ * dnsdomainname [-v]
+ *  { bbox: supported: Linux kernel build needs this }
+ * nisdomainname [-v]
+ *  { bbox: not supported }
+ * ypdomainname [-v]
+ *  { bbox: not supported }
+ *
+ * -a, --alias
+ *  Display the alias name of the host (if used).
+ *  { bbox: not supported }
+ * -d, --domain
+ *  Display the name of the DNS domain. Don't use the command
+ *  domainname to get the DNS domain name because it will show the
+ *  NIS domain name and not the DNS domain name. Use dnsdomainname
+ *  instead.
+ * -f, --fqdn, --long
+ *  Display the FQDN (Fully Qualified Domain Name). A FQDN consists
+ *  of a short host name and the DNS domain name. Unless you are
+ *  using bind or NIS for host lookups you can change the FQDN and
+ *  the DNS domain name (which is part of the FQDN) in the
+ *  /etc/hosts file.
+ * -i, --ip-address
+ *  Display the IP address(es) of the host.
+ * -s, --short
+ *  Display the short host name. This is the host name cut at the
+ *  first dot.
+ * -v, --verbose
+ *  Be verbose and tell what's going on.
+ *  { bbox: supported but ignored }
+ * -y, --yp, --nis
+ *  Display the NIS domain name. If a parameter is given (or --file
+ *  name ) then root can also set a new NIS domain.
+ *  { bbox: not supported }
+ * -F, --file filename
+ *  Read the host name from the specified file. Comments (lines
+ *  starting with a `#') are ignored.
+ */
 int hostname_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
-int hostname_main(int argc, char **argv)
+int hostname_main(int argc UNUSED_PARAM, char **argv)
 {
 	enum {
 		OPT_d = 0x1,
@@ -44,49 +91,63 @@ int hostname_main(int argc, char **argv)
 		OPT_dfis = 0xf,
 	};
 
+	unsigned opts;
 	char *buf;
 	char *hostname_str;
 
-	if (argc < 1)
-		bb_show_usage();
+#if ENABLE_LONG_OPTS
+	applet_long_options =
+		"domain\0"     No_argument "d"
+		"fqdn\0"       No_argument "f"
+	//Enable if seen in active use in some distro:
+	//	"long\0"       No_argument "f"
+	//	"ip-address\0" No_argument "i"
+	//	"short\0"      No_argument "s"
+	//	"verbose\0"    No_argument "v"
+		"file\0"       No_argument "F"
+		;
 
-	getopt32(argv, "dfisF:", &hostname_str);
+#endif
+	/* dnsdomainname from net-tools 1.60, hostname 1.100 (2001-04-14),
+	 * supports hostname's options too (not just -v as manpage says) */
+	opts = getopt32(argv, "dfisF:v", &hostname_str);
 	argv += optind;
 	buf = safe_gethostname();
+	if (applet_name[0] == 'd') /* dnsdomainname? */
+		opts = OPT_d;
 
-	/* Output in desired format */
-	if (option_mask32 & OPT_dfis) {
+	if (opts & OPT_dfis) {
+		/* Cases when we need full hostname (or its part) */
 		struct hostent *hp;
 		char *p;
+
 		hp = xgethostbyname(buf);
-		p = strchr(hp->h_name, '.');
-		if (option_mask32 & OPT_f) {
+		p = strchrnul(hp->h_name, '.');
+		if (opts & OPT_f) {
 			puts(hp->h_name);
-		} else if (option_mask32 & OPT_s) {
-			if (p)
-				*p = '\0';
+		} else if (opts & OPT_s) {
+			*p = '\0';
 			puts(hp->h_name);
-		} else if (option_mask32 & OPT_d) {
-			if (p)
+		} else if (opts & OPT_d) {
+			if (*p)
 				puts(p + 1);
-		} else if (option_mask32 & OPT_i) {
+		} else /*if (opts & OPT_i)*/ {
 			while (hp->h_addr_list[0]) {
 				printf("%s ", inet_ntoa(*(struct in_addr *) (*hp->h_addr_list++)));
 			}
 			bb_putchar('\n');
 		}
-	}
-	/* Set the hostname */
-	else if (option_mask32 & OPT_F) {
+	} else if (opts & OPT_F) {
+		/* Set the hostname */
 		do_sethostname(hostname_str, 1);
 	} else if (argv[0]) {
+		/* Set the hostname */
 		do_sethostname(argv[0], 0);
-	}
-	/* Or if all else fails,
-	 * just print the current hostname */
-	else {
+	} else {
+		/* Just print the current hostname */
 		puts(buf);
 	}
+
 	if (ENABLE_FEATURE_CLEAN_UP)
 		free(buf);
 	return EXIT_SUCCESS;
