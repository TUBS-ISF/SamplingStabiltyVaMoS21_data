2009-08-30 19:32:45 +0200
diff --git a/coreutils/uniq.c b/coreutils/uniq.c
index 126eaee..eceff6d 100644
--- a/coreutils/uniq.c
+++ b/coreutils/uniq.c
@@ -18,7 +18,7 @@ static FILE *xgetoptfile_uniq_s(char **argv, int read0write2)
 
 	n = *argv;
 	if (n != NULL) {
-		if ((*n != '-') || n[1]) {
+		if ((n[0] != '-') || n[1]) {
 			return xfopen(n, "r\0w" + read0write2);
 		}
 	}
@@ -29,16 +29,16 @@ int uniq_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int uniq_main(int argc UNUSED_PARAM, char **argv)
 {
 	FILE *in, *out;
-	const char *s0, *e0, *s1, *e1, *input_filename;
-	unsigned long dups;
+	const char *input_filename;
 	unsigned skip_fields, skip_chars, max_chars;
 	unsigned opt;
-	unsigned i;
+	char *cur_line;
+	const char *cur_compare;
 
 	enum {
 		OPT_c = 0x1,
-		OPT_d = 0x2,
-		OPT_u = 0x4,
+		OPT_d = 0x2, /* print only dups */
+		OPT_u = 0x4, /* print only uniq */
 		OPT_f = 0x8,
 		OPT_s = 0x10,
 		OPT_w = 0x20,
@@ -62,39 +62,44 @@ int uniq_main(int argc UNUSED_PARAM, char **argv)
 		bb_show_usage();
 	}
 
-	s1 = e1 = NULL; /* prime the pump */
+	cur_compare = cur_line = NULL; /* prime the pump */
 
 	do {
-		s0 = s1;
-		e0 = e1;
+		unsigned i;
+		unsigned long dups;
+		char *old_line;
+		const char *old_compare;
+
+		old_line = cur_line;
+		old_compare = cur_compare;
 		dups = 0;
 
 		/* gnu uniq ignores newlines */
-		while ((s1 = xmalloc_fgetline(in)) != NULL) {
-			e1 = s1;
+		while ((cur_line = xmalloc_fgetline(in)) != NULL) {
+			cur_compare = cur_line;
 			for (i = skip_fields; i; i--) {
-				e1 = skip_whitespace(e1);
-				e1 = skip_non_whitespace(e1);
+				cur_compare = skip_whitespace(cur_compare);
+				cur_compare = skip_non_whitespace(cur_compare);
 			}
-			for (i = skip_chars; *e1 && i; i--) {
-				++e1;
+			for (i = skip_chars; *cur_compare && i; i--) {
+				++cur_compare;
 			}
 
-			if (!s0 || strncmp(e0, e1, max_chars)) {
+			if (!old_line || strncmp(old_compare, cur_compare, max_chars)) {
 				break;
 			}
 
-			++dups;	 /* note: testing for overflow seems excessive. */
+			++dups;	 /* testing for overflow seems excessive */
 		}
 
-		if (s0) {
-			if (!(opt & (OPT_d << !!dups))) { /* (if dups, opt & OPT_e) */
-				fprintf(out, "\0%ld " + (opt & 1), dups + 1); /* 1 == OPT_c */
-				fprintf(out, "%s\n", s0);
+		if (old_line) {
+			if (!(opt & (OPT_d << !!dups))) { /* (if dups, opt & OPT_u) */
+				fprintf(out, "\0%lu " + (opt & 1), dups + 1); /* 1 == OPT_c */
+				fprintf(out, "%s\n", old_line);
 			}
-			free((void *)s0);
+			free(old_line);
 		}
-	} while (s1);
+	} while (cur_line);
 
 	die_if_ferror(in, input_filename);
 
