2009-07-18 03:40:35 +0200
diff --git a/coreutils/date.c b/coreutils/date.c
index 3a536db..7f2a5b3 100644
--- a/coreutils/date.c
+++ b/coreutils/date.c
@@ -10,8 +10,6 @@
  * Licensed under GPLv2 or later, see file LICENSE in this tarball for details.
 */
 
-#include "libbb.h"
-
 /* This 'date' command supports only 2 time setting formats,
    all the GNU strftime stuff (its in libc, lets use it),
    setting time using UTC and displaying it, as well as
@@ -23,18 +21,51 @@
 
 /* Default input handling to save surprising some people */
 
+/* GNU coreutils 6.9 man page:
+ * date [OPTION]... [+FORMAT]
+ * date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]
+ * -d, --date=STRING
+ *      display time described by STRING, not `now'
+ * -f, --file=DATEFILE
+ *      like --date once for each line of DATEFILE
+ * -r, --reference=FILE
+ *      display the last modification time of FILE
+ * -R, --rfc-2822
+ *      output date and time in RFC 2822 format.
+ *      Example: Mon, 07 Aug 2006 12:34:56 -0600
+ * --rfc-3339=TIMESPEC
+ *      output date and time in RFC 3339 format.
+ *      TIMESPEC='date', 'seconds', or 'ns'
+ *      Date and time components are separated by a single space:
+ *      2006-08-07 12:34:56-06:00
+ * -s, --set=STRING
+ *      set time described by STRING
+ * -u, --utc, --universal
+ *      print or set Coordinated Universal Time
+ *
+ * Busybox:
+ * long options are not supported
+ * -f is not supported
+ * -I seems to roughly match --rfc-3339, but -I has _optional_ param
+ *    (thus "-I seconds" doesn't work, only "-Iseconds"),
+ *    and does not support -Ins
+ * -D FMT is a bbox extension for _input_ conversion of -d DATE
+ */
+#include "libbb.h"
 
-#define DATE_OPT_RFC2822	0x01
-#define DATE_OPT_SET		0x02
-#define DATE_OPT_UTC		0x04
-#define DATE_OPT_DATE		0x08
-#define DATE_OPT_REFERENCE	0x10
-#define DATE_OPT_TIMESPEC	0x20
-#define DATE_OPT_HINT		0x40
+enum {
+	OPT_RFC2822   = (1 << 0), /* R */
+	OPT_SET       = (1 << 1), /* s */
+	OPT_UTC       = (1 << 2), /* u */
+	OPT_DATE      = (1 << 3), /* d */
+	OPT_REFERENCE = (1 << 4), /* r */
+	OPT_TIMESPEC  = (1 << 5) * ENABLE_FEATURE_DATE_ISOFMT, /* I */
+	OPT_HINT      = (1 << 6) * ENABLE_FEATURE_DATE_ISOFMT, /* D */
+};
 
 static void maybe_set_utc(int opt)
 {
-	if (opt & DATE_OPT_UTC)
+	if (opt & OPT_UTC)
 		putenv((char*)"TZ=UTC0");
 }
 
@@ -60,7 +91,7 @@ int date_main(int argc UNUSED_PARAM, char **argv)
 	argv += optind;
 	maybe_set_utc(opt);
 
-	if (ENABLE_FEATURE_DATE_ISOFMT && (opt & DATE_OPT_TIMESPEC)) {
+	if (ENABLE_FEATURE_DATE_ISOFMT && (opt & OPT_TIMESPEC)) {
 		ifmt = 0; /* default is date */
 		if (isofmt_arg) {
 			static const char isoformats[] ALIGN1 =
@@ -76,8 +107,8 @@ int date_main(int argc UNUSED_PARAM, char **argv)
 		fmt_dt2str = &argv[0][1];	/* Skip over the '+' */
 		argv++;
 	}
-	if (!(opt & (DATE_OPT_SET | DATE_OPT_DATE))) {
-		opt |= DATE_OPT_SET;
+	if (!(opt & (OPT_SET | OPT_DATE))) {
+		opt |= OPT_SET;
 		date_str = argv[0]; /* can be NULL */
 		if (date_str)
 			argv++;
@@ -88,13 +119,14 @@ int date_main(int argc UNUSED_PARAM, char **argv)
 	/* Now we have parsed all the information except the date format
 	   which depends on whether the clock is being set or read */
 
-	if (opt & DATE_OPT_REFERENCE) {
+	if (opt & OPT_REFERENCE) {
 		struct stat statbuf;
 		xstat(filename, &statbuf);
 		tm = statbuf.st_mtime;
-	} else
+	} else {
 		time(&tm);
-	memcpy(&tm_time, localtime(&tm), sizeof(tm_time));
+	}
+	localtime_r(&tm, &tm_time);
 
 	/* If date string is given, update tm_time, and maybe set date */
 	if (date_str != NULL) {
@@ -104,72 +136,14 @@ int date_main(int argc UNUSED_PARAM, char **argv)
 		tm_time.tm_hour = 0;
 
 		/* Process any date input to UNIX time since 1 Jan 1970 */
-		if (ENABLE_FEATURE_DATE_ISOFMT && (opt & DATE_OPT_HINT)) {
+		if (ENABLE_FEATURE_DATE_ISOFMT && (opt & OPT_HINT)) {
 			if (strptime(date_str, fmt_str2dt, &tm_time) == NULL)
 				bb_error_msg_and_die(bb_msg_invalid_date, date_str);
 		} else {
-			char end = '\0';
-			const char *last_colon = strrchr(date_str, ':');
-
-			if (last_colon != NULL) {
-				/* Parse input and assign appropriately to tm_time */
-
-				if (sscanf(date_str, "%u:%u%c",
-								&tm_time.tm_hour,
-								&tm_time.tm_min,
-								&end) >= 2) {
-					/* no adjustments needed */
-				} else if (sscanf(date_str, "%u.%u-%u:%u%c",
-								&tm_time.tm_mon, &tm_time.tm_mday,
-								&tm_time.tm_hour, &tm_time.tm_min,
-								&end) >= 4) {
-					/* Adjust dates from 1-12 to 0-11 */
-					tm_time.tm_mon -= 1;
-				} else if (sscanf(date_str, "%u.%u.%u-%u:%u%c", &tm_time.tm_year,
-								&tm_time.tm_mon, &tm_time.tm_mday,
-								&tm_time.tm_hour, &tm_time.tm_min,
-								&end) >= 5) {
-					tm_time.tm_year -= 1900; /* Adjust years */
-					tm_time.tm_mon -= 1; /* Adjust dates from 1-12 to 0-11 */
-				} else if (sscanf(date_str, "%u-%u-%u %u:%u%c", &tm_time.tm_year,
-								&tm_time.tm_mon, &tm_time.tm_mday,
-								&tm_time.tm_hour, &tm_time.tm_min,
-								&end) >= 5) {
-					tm_time.tm_year -= 1900; /* Adjust years */
-					tm_time.tm_mon -= 1; /* Adjust dates from 1-12 to 0-11 */
-//TODO: coreutils 6.9 also accepts "YYYY-MM-DD HH" (no minutes)
-				} else {
-					bb_error_msg_and_die(bb_msg_invalid_date, date_str);
-				}
-				if (end == ':') {
-					if (sscanf(last_colon + 1, "%u%c", &tm_time.tm_sec, &end) == 1)
-						end = '\0';
-					/* else end != NUL and we error out */
-				}
-			} else {
-				if (sscanf(date_str, "%2u%2u%2u%2u%u%c", &tm_time.tm_mon,
-							&tm_time.tm_mday, &tm_time.tm_hour, &tm_time.tm_min,
-							&tm_time.tm_year, &end) < 4)
-					bb_error_msg_and_die(bb_msg_invalid_date, date_str);
-				/* correct for century  - minor Y2K problem here? */
-				if (tm_time.tm_year >= 1900) {
-					tm_time.tm_year -= 1900;
-				}
-				/* adjust date */
-				tm_time.tm_mon -= 1;
-				if (end == '.') {
-					if (sscanf(strchr(date_str, '.') + 1, "%u%c",
-							&tm_time.tm_sec, &end) == 1)
-						end = '\0';
-					/* else end != NUL and we error out */
-				}
-			}
-			if (end != '\0') {
-				bb_error_msg_and_die(bb_msg_invalid_date, date_str);
-			}
+			parse_datestr(date_str, &tm_time);
 		}
 		/* Correct any day of week and day of year etc. fields */
-		tm_time.tm_isdst = -1;	/* Be sure to recheck dst. */
+		tm_time.tm_isdst = -1;	/* Be sure to recheck dst */
 		tm = mktime(&tm_time);
 		if (tm < 0) {
 			bb_error_msg_and_die(bb_msg_invalid_date, date_str);
@@ -177,7 +151,7 @@ int date_main(int argc UNUSED_PARAM, char **argv)
 		maybe_set_utc(opt);
 
 		/* if setting time, set it */
-		if ((opt & DATE_OPT_SET) && stime(&tm) < 0) {
+		if ((opt & OPT_SET) && stime(&tm) < 0) {
 			bb_perror_msg("cannot set date");
 		}
 	}
@@ -207,9 +181,9 @@ int date_main(int argc UNUSED_PARAM, char **argv)
 				}
  format_utc:
 				fmt_dt2str[i++] = '%';
-				fmt_dt2str[i] = (opt & DATE_OPT_UTC) ? 'Z' : 'z';
+				fmt_dt2str[i] = (opt & OPT_UTC) ? 'Z' : 'z';
 			}
-		} else if (opt & DATE_OPT_RFC2822) {
+		} else if (opt & OPT_RFC2822) {
 			/* Undo busybox.c for date -R */
 			if (ENABLE_LOCALE_SUPPORT)
 				setlocale(LC_TIME, "C");
diff --git a/include/libbb.h b/include/libbb.h
index 50b8841..9de5233 100644
--- a/include/libbb.h
+++ b/include/libbb.h
@@ -437,6 +437,9 @@ struct BUG_too_small {
 };
 
 
+void parse_datestr(const char *date_str, struct tm *tm_time) FAST_FUNC;
+
+
 int xsocket(int domain, int type, int protocol) FAST_FUNC;
 void xbind(int sockfd, struct sockaddr *my_addr, socklen_t addrlen) FAST_FUNC;
 void xlisten(int s, int backlog) FAST_FUNC;
diff --git a/libbb/time.c b/libbb/time.c
index 850ac15..30b760f 100644
--- a/libbb/time.c
+++ b/libbb/time.c
@@ -6,9 +6,71 @@
  *
  * Licensed under GPL version 2, see file LICENSE in this tarball for details.
  */
-
 #include "libbb.h"
 
+void FAST_FUNC parse_datestr(const char *date_str, struct tm *tm_time)
+{
+	char end = '\0';
+	const char *last_colon = strrchr(date_str, ':');
+
+	if (last_colon != NULL) {
+		/* Parse input and assign appropriately to tm_time */
+
+		if (sscanf(date_str, "%u:%u%c",
+					&tm_time->tm_hour,
+					&tm_time->tm_min,
+					&end) >= 2) {
+			/* no adjustments needed */
+		} else if (sscanf(date_str, "%u.%u-%u:%u%c",
+					&tm_time->tm_mon, &tm_time->tm_mday,
+					&tm_time->tm_hour, &tm_time->tm_min,
+					&end) >= 4) {
+			/* Adjust dates from 1-12 to 0-11 */
+			tm_time->tm_mon -= 1;
+		} else if (sscanf(date_str, "%u.%u.%u-%u:%u%c", &tm_time->tm_year,
+					&tm_time->tm_mon, &tm_time->tm_mday,
+					&tm_time->tm_hour, &tm_time->tm_min,
+					&end) >= 5) {
+			tm_time->tm_year -= 1900; /* Adjust years */
+			tm_time->tm_mon -= 1; /* Adjust dates from 1-12 to 0-11 */
+		} else if (sscanf(date_str, "%u-%u-%u %u:%u%c", &tm_time->tm_year,
+					&tm_time->tm_mon, &tm_time->tm_mday,
+					&tm_time->tm_hour, &tm_time->tm_min,
+					&end) >= 5) {
+			tm_time->tm_year -= 1900; /* Adjust years */
+			tm_time->tm_mon -= 1; /* Adjust dates from 1-12 to 0-11 */
+//TODO: coreutils 6.9 also accepts "YYYY-MM-DD HH" (no minutes)
+		} else {
+			bb_error_msg_and_die(bb_msg_invalid_date, date_str);
+		}
+		if (end == ':') {
+			if (sscanf(last_colon + 1, "%u%c", &tm_time->tm_sec, &end) == 1)
+				end = '\0';
+			/* else end != NUL and we error out */
+		}
+	} else {
+		if (sscanf(date_str, "%2u%2u%2u%2u%u%c", &tm_time->tm_mon,
+				&tm_time->tm_mday, &tm_time->tm_hour, &tm_time->tm_min,
+				&tm_time->tm_year, &end) < 4)
+			bb_error_msg_and_die(bb_msg_invalid_date, date_str);
+		/* correct for century  - minor Y2K problem here? */
+		if (tm_time->tm_year >= 1900) {
+			tm_time->tm_year -= 1900;
+		}
+		/* adjust date */
+		tm_time->tm_mon -= 1;
+		if (end == '.') {
+			if (sscanf(strchr(date_str, '.') + 1, "%u%c",
+					&tm_time->tm_sec, &end) == 1)
+				end = '\0';
+			/* else end != NUL and we error out */
+		}
+	}
+	if (end != '\0') {
+		bb_error_msg_and_die(bb_msg_invalid_date, date_str);
+	}
+}
+
 #if ENABLE_MONOTONIC_SYSCALL
 
 #include <sys/syscall.h>
diff --git a/testsuite/bunzip2.tests b/testsuite/bunzip2.tests
index 3105ba4..a7555ac 100755
--- a/testsuite/bunzip2.tests
+++ b/testsuite/bunzip2.tests
@@ -470,9 +470,9 @@ prep() {
 check() {
     eval $2 >t_actual 2>&1
     if $ECHO -ne "$expected" | cmp - t_actual; then
-	echo "$1: PASS"
+	echo "PASS: $1"
     else
-	echo "$1: FAIL"
+	echo "FAIL: $1"
     fi
 }
 
diff --git a/util-linux/hwclock.c b/util-linux/hwclock.c
index 3d28364..2cdb186 100644
--- a/util-linux/hwclock.c
+++ b/util-linux/hwclock.c
@@ -36,7 +36,10 @@ static void write_rtc(time_t t, int utc)
 	struct tm tm;
 	int rtc = rtc_xopen(&rtcname, O_WRONLY);
 
-	tm = *(utc ? gmtime(&t) : localtime(&t));
+	if (utc)
+		gmtime_r(&t, &tm);
+	else
+		localtime_r(&t, &tm);
 	tm.tm_isdst = 0;
 
 	xioctl(rtc, RTC_SET_TIME, &tm);
