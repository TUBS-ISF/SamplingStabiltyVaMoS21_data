2009-11-01 23:05:09 +0100
diff --git a/util-linux/Config.in b/util-linux/Config.in
index 578d059..36664de 100644
--- a/util-linux/Config.in
+++ b/util-linux/Config.in
@@ -451,6 +451,13 @@ config FEATURE_VOLUMEID_EXT
 	help
 	  TODO
 
+config FEATURE_VOLUMEID_BTRFS
+	bool "btrfs filesystem"
+	default n
+	depends on VOLUMEID
+	help
+	  TODO
+
 config FEATURE_VOLUMEID_REISERFS
 	bool "Reiser filesystem"
 	default n
diff --git a/util-linux/volume_id/Kbuild b/util-linux/volume_id/Kbuild
index d78e4ad..3520f24 100644
--- a/util-linux/volume_id/Kbuild
+++ b/util-linux/volume_id/Kbuild
@@ -11,6 +11,7 @@ lib-$(CONFIG_FINDFS)                            += get_devname.o
 lib-$(CONFIG_FEATURE_MOUNT_LABEL)               += get_devname.o
 
 lib-$(CONFIG_VOLUMEID)                          += volume_id.o util.o
+lib-$(CONFIG_FEATURE_VOLUMEID_BTRFS)            += btrfs.o
 lib-$(CONFIG_FEATURE_VOLUMEID_EXT)              += ext.o
 lib-$(CONFIG_FEATURE_VOLUMEID_FAT)              += fat.o
 lib-$(CONFIG_FEATURE_VOLUMEID_HFS)              += hfs.o
diff --git a/util-linux/volume_id/btrfs.c b/util-linux/volume_id/btrfs.c
new file mode 100644
index 0000000..98f1507
--- /dev/null
+++ b/util-linux/volume_id/btrfs.c
@@ -0,0 +1,100 @@
+/*
+ * volume_id - reads filesystem label and uuid
+ *
+ * Copyright (C) 2004 Kay Sievers <kay.sievers@vrfy.org>
+ * Copyright (C) 2009 Vladimir Dronnikov <dronnikov@gmail.com>
+ *
+ *	This library is free software; you can redistribute it and/or
+ *	modify it under the terms of the GNU Lesser General Public
+ *	License as published by the Free Software Foundation; either
+ *	version 2.1 of the License, or (at your option) any later version.
+ *
+ *	This library is distributed in the hope that it will be useful,
+ *	but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ *	Lesser General Public License for more details.
+ *
+ *	You should have received a copy of the GNU Lesser General Public
+ *	License along with this library; if not, write to the Free Software
+ *	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ */
+
+#include "volume_id_internal.h"
+
+#define BTRFS_UUID_SIZE 16
+#define BTRFS_LABEL_SIZE 256
+#define BTRFS_CSUM_SIZE 32
+#define BTRFS_FSID_SIZE 16
+
+#define BTRFS_MAGIC "_BHRfS_M"
+
+struct btrfs_dev_item {
+	uint64_t devid;
+	uint64_t total_bytes;
+	uint64_t bytes_used;
+	uint32_t io_align;
+	uint32_t io_width;
+	uint32_t sector_size;
+	uint64_t type;
+	uint64_t generation;
+	uint64_t start_offset;
+	uint32_t dev_group;
+	uint8_t seek_speed;
+	uint8_t bandwidth;
+	uint8_t uuid[BTRFS_UUID_SIZE];
+	uint8_t fsid[BTRFS_UUID_SIZE];
+} PACKED;
+
+struct btrfs_super_block {
+	uint8_t csum[BTRFS_CSUM_SIZE];
+	uint8_t fsid[BTRFS_FSID_SIZE];	// UUID
+	uint64_t bytenr;
+	uint64_t flags;
+	uint8_t magic[8];
+	uint64_t generation;
+	uint64_t root;
+	uint64_t chunk_root;
+	uint64_t log_root;
+	uint64_t log_root_transid;
+	uint64_t total_bytes;
+	uint64_t bytes_used;
+	uint64_t root_dir_objectid;
+	uint64_t num_devices;
+	uint32_t sectorsize;
+	uint32_t nodesize;
+	uint32_t leafsize;
+	uint32_t stripesize;
+	uint32_t sys_chunk_array_size;
+	uint64_t chunk_root_generation;
+	uint64_t compat_flags;
+	uint64_t compat_ro_flags;
+	uint64_t incompat_flags;
+	uint16_t csum_type;
+	uint8_t root_level;
+	uint8_t chunk_root_level;
+	uint8_t log_root_level;
+	struct btrfs_dev_item dev_item;
+	uint8_t label[BTRFS_LABEL_SIZE];	// LABEL
+	// ...
+} PACKED;
+
+int volume_id_probe_btrfs(struct volume_id *id /*,uint64_t off*/)
+{
+#define off ((uint64_t) (64 * 1024))
+	struct btrfs_super_block *sb;
+
+	dbg("btrfs: probing at offset 0x%llx", (unsigned long long) off);
+
+	sb = volume_id_get_buffer(id, off, sizeof(*sb));
+	if (sb == NULL)
+		return -1;
+
+	if (memcmp(sb->magic, BTRFS_MAGIC, 8) != 0)
+		return -1;
+
+	// N.B.: btrfs supports 256-byte labels
+	volume_id_set_label_string(id, sb->label, VOLUME_ID_LABEL_SIZE);
+	volume_id_set_uuid(id, sb->fsid, UUID_DCE);
+
+	return 0;
+}
diff --git a/util-linux/volume_id/get_devname.c b/util-linux/volume_id/get_devname.c
index 9b5283f..4d9f9ec 100644
--- a/util-linux/volume_id/get_devname.c
+++ b/util-linux/volume_id/get_devname.c
@@ -44,7 +44,7 @@ get_label_uuid(int fd, char **label, char **uuid)
 	if (vid->label[0] != '\0' || vid->uuid[0] != '\0') {
 		*label = xstrndup(vid->label, sizeof(vid->label));
 		*uuid  = xstrndup(vid->uuid, sizeof(vid->uuid));
-		dbg("found label '%s', uuid '%s' on %s", *label, *uuid, device);
+		dbg("found label '%s', uuid '%s'", *label, *uuid);
 		rv = 0;
 	}
  ret:
diff --git a/util-linux/volume_id/volume_id.c b/util-linux/volume_id/volume_id.c
index 1acd905..590f51d 100644
--- a/util-linux/volume_id/volume_id.c
+++ b/util-linux/volume_id/volume_id.c
@@ -109,6 +109,9 @@ static const probe_fptr fs2[] = {
 #if ENABLE_FEATURE_VOLUMEID_EXT
 	volume_id_probe_ext,
 #endif
+#if ENABLE_FEATURE_VOLUMEID_BTRFS
+	volume_id_probe_btrfs,
+#endif
 #if ENABLE_FEATURE_VOLUMEID_REISERFS
 	volume_id_probe_reiserfs,
 #endif
diff --git a/util-linux/volume_id/volume_id_internal.h b/util-linux/volume_id/volume_id_internal.h
index af58883..65575b7 100644
--- a/util-linux/volume_id/volume_id_internal.h
+++ b/util-linux/volume_id/volume_id_internal.h
@@ -184,6 +184,8 @@ int volume_id_probe_linux_raid(struct volume_id *id /*,uint64_t off*/, uint64_t
 
 /* FS */
 
+int volume_id_probe_btrfs(struct volume_id *id /*,uint64_t off*/);
+
 int volume_id_probe_cramfs(struct volume_id *id /*,uint64_t off*/);
 
 int volume_id_probe_ext(struct volume_id *id /*,uint64_t off*/);
