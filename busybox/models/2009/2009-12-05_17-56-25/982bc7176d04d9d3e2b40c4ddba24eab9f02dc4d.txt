2009-12-05 17:56:25 +0100
diff --git a/include/applets.h b/include/applets.h
index d1a84ee..7d5d440 100644
--- a/include/applets.h
+++ b/include/applets.h
@@ -246,6 +246,7 @@ IF_LS(APPLET_NOEXEC(ls, ls, _BB_DIR_BIN, _BB_SUID_DROP, ls))
 IF_LSATTR(APPLET(lsattr, _BB_DIR_BIN, _BB_SUID_DROP))
 IF_LSMOD(APPLET(lsmod, _BB_DIR_SBIN, _BB_SUID_DROP))
 IF_MODPROBE_SMALL(APPLET_ODDNAME(lsmod, modprobe, _BB_DIR_SBIN, _BB_SUID_DROP, modprobe))
+IF_LSPCI(APPLET(lspci, _BB_DIR_SBIN, _BB_SUID_DROP))
 IF_UNLZMA(APPLET_ODDNAME(lzmacat, unlzma, _BB_DIR_USR_BIN, _BB_SUID_DROP, lzmacat))
 IF_LZOP(APPLET(lzop, _BB_DIR_BIN, _BB_SUID_DROP))
 IF_LZOP(APPLET_ODDNAME(lzopcat, lzop, _BB_DIR_USR_BIN, _BB_SUID_DROP, lzopcat))
diff --git a/include/usage.h b/include/usage.h
index 1505ac3..6b27384 100644
--- a/include/usage.h
+++ b/include/usage.h
@@ -2502,6 +2502,14 @@
 #define lsmod_full_usage "\n\n" \
        "List the currently loaded kernel modules"
 
+#define lspci_trivial_usage \
+       "[-mk]"
+#define lspci_full_usage "\n\n" \
+       "List all PCI devices" \
+     "\n" \
+     "\n	-m	Parseable output" \
+     "\n	-k	Show driver" \
+
 #if ENABLE_FEATURE_MAKEDEVS_LEAF
 #define makedevs_trivial_usage \
        "NAME TYPE MAJOR MINOR FIRST LAST [s]"
diff --git a/util-linux/Config.in b/util-linux/Config.in
index 9827145..94337df 100644
--- a/util-linux/Config.in
+++ b/util-linux/Config.in
@@ -348,6 +348,15 @@ config LOSETUP
 	  file or block device, and to query the status of a loop device. This
 	  version does not currently support enabling data encryption.
 
+config LSPCI
+	bool "lspci"
+	default n
+	help
+	  lspci is a utility for displaying information about PCI buses in the
+	  system and devices connected to them.
+
+	  This version uses sysfs (/sys/bus/pci/devices) only.
+
 config MDEV
 	bool "mdev"
 	default n
diff --git a/util-linux/Kbuild b/util-linux/Kbuild
index 89886cb..3004fd0 100644
--- a/util-linux/Kbuild
+++ b/util-linux/Kbuild
@@ -21,6 +21,7 @@ lib-$(CONFIG_HWCLOCK)           += hwclock.o
 lib-$(CONFIG_IPCRM)             += ipcrm.o
 lib-$(CONFIG_IPCS)              += ipcs.o
 lib-$(CONFIG_LOSETUP)           += losetup.o
+lib-$(CONFIG_LSPCI)             += lspci.o
 lib-$(CONFIG_MDEV)              += mdev.o
 lib-$(CONFIG_MKFS_EXT2)         += mkfs_ext2.o
 lib-$(CONFIG_MKFS_MINIX)        += mkfs_minix.o
diff --git a/util-linux/lspci.c b/util-linux/lspci.c
new file mode 100644
index 0000000..752d4f5
--- /dev/null
+++ b/util-linux/lspci.c
@@ -0,0 +1,103 @@
+/* vi: set sw=4 ts=4: */
+/*
+* lspci implementation for busybox
+*
+* Copyright (C) 2009  Malek Degachi <malek-degachi@laposte.net>
+*
+* Licensed under the GPL v2 or later, see the file LICENSE in this tarball.
+*/
+#include <libbb.h>
+
+enum {
+	OPT_m = (1 << 0),
+	OPT_k = (1 << 1),
+};
+
+/*
+ * PCI_SLOT_NAME PCI_CLASS: PCI_VID:PCI_DID [PCI_SUBSYS_VID:PCI_SUBSYS_DID] [DRIVER]
+ */
+static int FAST_FUNC fileAction(
+		const char *fileName,
+		struct stat *statbuf UNUSED_PARAM,
+		void *userData UNUSED_PARAM,
+		int depth UNUSED_PARAM)
+{
+	parser_t *parser;
+	char *tokens[3];
+	char *pci_slot_name = NULL, *driver = NULL;
+	int pci_class = 0, pci_vid = 0, pci_did = 0;
+	int pci_subsys_vid = 0, pci_subsys_did = 0;
+
+	char *uevent_filename = concat_path_file(fileName, "/uevent");
+	parser = config_open2(uevent_filename, fopen_for_read);
+	free(uevent_filename);
+
+	while (config_read(parser, tokens, 3, 2, "\0:=", PARSE_NORMAL)) {
+		if (strcmp(tokens[0], "DRIVER") == 0) {
+			driver = xstrdup(tokens[1]);
+			continue;
+		}
+
+		if (strcmp(tokens[0], "PCI_CLASS") == 0) {
+			pci_class = xstrtou(tokens[1], 16)>>8;
+			continue;
+		}
+
+		if (strcmp(tokens[0], "PCI_ID") == 0) {
+			pci_vid = xstrtou(tokens[1], 16);
+			pci_did = xstrtou(tokens[2], 16);
+			continue;
+		}
+
+		if (strcmp(tokens[0], "PCI_SUBSYS_ID") == 0) {
+			pci_subsys_vid = xstrtou(tokens[1], 16);
+			pci_subsys_did = xstrtou(tokens[2], 16);
+			continue;
+		}
+
+		if (strcmp(tokens[0], "PCI_SLOT_NAME") == 0) {
+			pci_slot_name = xstrdup(tokens[2]);
+			continue;
+		}
+	}
+	config_close(parser);
+
+
+	if (option_mask32 & OPT_m) {
+		printf("%s \"Class %04x\" \"%04x\" \"%04x\" \"%04x\" \"%04x\"",
+		       pci_slot_name, pci_class, pci_vid, pci_did,
+		       pci_subsys_vid, pci_subsys_did);
+	} else {
+		printf("%s Class %04x: %04x:%04x",
+		       pci_slot_name, pci_class, pci_vid, pci_did);
+	}
+
+	if ((option_mask32 & OPT_k) && driver) {
+		if (option_mask32 & OPT_m) {
+			printf(" \"%s\"", driver);
+		} else {
+			printf(" %s", driver);
+		}
+	}
+	bb_putchar('\n');
+
+	free(driver);
+	free(pci_slot_name);
+
+	return TRUE;
+}
+
+int lspci_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
+int lspci_main(int argc UNUSED_PARAM, char **argv)
+{
+	getopt32(argv, "m" /*non-compat:*/ "k" /*ignored:*/ "nv");
+
+	recursive_action("/sys/bus/pci/devices",
+			ACTION_RECURSE,
+			fileAction,
+			NULL, /* dirAction */
+			NULL, /* userData */
+			0 /* depth */);
+
+	return EXIT_SUCCESS;
+}
